<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CycloneKid的个人博客</title>
  
  <subtitle>一位在校大学生的学习笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-26T13:21:57.561Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CycloneKid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis-01-NoSQL简介及Redis数据库安装</title>
    <link href="http://yoursite.com/2018/04/16/Redis-01-NoSQL%E7%AE%80%E4%BB%8B%E5%8F%8ARedis%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2018/04/16/Redis-01-NoSQL简介及Redis数据库安装/</id>
    <published>2018-04-16T14:32:17.000Z</published>
    <updated>2018-12-26T13:21:57.561Z</updated>
    
    <content type="html"><![CDATA[<p>NoSQL非关系型数据库的概念及最流行的非关系型数据库Redis数据库的安装<br><a id="more"></a></p><h1 id="一-NoSQL简介"><a href="#一-NoSQL简介" class="headerlink" title="一.NoSQL简介"></a>一.NoSQL简介</h1><h2 id="1-1-NoSQL概述"><a href="#1-1-NoSQL概述" class="headerlink" title="1.1 NoSQL概述"></a>1.1 NoSQL概述</h2><p>NoSQL即not only SQL（不仅仅是SQL）的意思，学名叫做非关系型数据库，和我们常见的关系型数据库（如MySQL，Oracle）在原理上有很大差异<br>非关系型数据库能很好解决web2.0纯动态网站面对的高并发和规模大扩展性受限等问题。非关系型数据库可以解决三个关系型数据库难以解决的问题。1.数据库高并发读写。2.对海量数据的高效率存储和访问。3.数据库的高扩展性和高可用</p><h2 id="1-2-NoSQL数据库的分类"><a href="#1-2-NoSQL数据库的分类" class="headerlink" title="1.2 NoSQL数据库的分类"></a>1.2 NoSQL数据库的分类</h2><p>关系型数据库有MySQL，Oracle等不同的种类。非关系型数据库也有很多不同的产品种类，所有这些产品根据其存储方式的不同主要分为4大类：</p><table><thead><tr><th>种类</th><th>典型产品</th><th>应用方向</th><th>数据模型</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>键值（key-value）</td><td>Redis,Voldemort,Oracle BDB</td><td>内容缓存，主要用于处理大量数据的高访问负载，也用于一些日志系统等等。</td><td>key-value（键值对）</td><td>查询速度快</td><td>数据没有结构</td></tr><tr><td>列存储数据库</td><td>Cassandra,HBase,Riak</td><td>分布式文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td>文档型数据库</td><td>CouchDB, MongoDb</td><td>web应用</td><td>key-value,value是结构化的数据</td><td>数据结构要求不严格，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法。</td></tr><tr><td>图形(Graph)数据库</td><td>Neo4J,InfoGrid,Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td></tr></tbody></table><h2 id="1-3-NoSQL数据库的特点"><a href="#1-3-NoSQL数据库的特点" class="headerlink" title="1.3 NoSQL数据库的特点"></a>1.3 NoSQL数据库的特点</h2><p>NoSQL数据库最重要的优点就是在大数据的存取上具备关系型数据库无法比拟的性能优势。主要是因为其如下特点</p><h3 id="1）易扩展"><a href="#1）易扩展" class="headerlink" title="1）易扩展"></a>1）易扩展</h3><p>非关系数据库去掉了关系数据库的关系特性。数据之间无关系，这样就容易扩展。</p><h3 id="2）高数据量时的高性能"><a href="#2）高数据量时的高性能" class="headerlink" title="2）高数据量时的高性能"></a>2）高数据量时的高性能</h3><p>非关系数据库在数据量非常大时依然能具有很高的读写性能</p><h3 id="3）灵活的数据模型"><a href="#3）灵活的数据模型" class="headerlink" title="3）灵活的数据模型"></a>3）灵活的数据模型</h3><p>非关系数据库无需实现为要存储的数据建立字段，随时可以存储自定义的数据格式。而建立字段在关系型数据库中确实一件必须的事情，在数据量比较大时，建立字段是一个相当麻烦的事情</p><h3 id="4）高可用"><a href="#4）高可用" class="headerlink" title="4）高可用"></a>4）高可用</h3><p>非关系数据库在不影响性能的情况下可以方便的实现高可用的架构。</p><h1 id="二-Redis简介"><a href="#二-Redis简介" class="headerlink" title="二.Redis简介"></a>二.Redis简介</h1><p>Redis是一个开源的使用C语言编写的Key-Value类型的非关系数据库，并提供多种语言的API。Redis是当前最流行的非关系数据库之一。<br>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作。<br>在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。<br>redis的官网地址：<a href="redis.io">redis.io</a><br>目前，Vmware在资助着redis项目的开发和维护。</p><h1 id="三-Redis安装"><a href="#三-Redis安装" class="headerlink" title="三.Redis安装"></a>三.Redis安装</h1><p>Redis一般安装在Linux系统上，Redis是C语言编写的，所以Redis的安装和运行需要C语言环境</p><h3 id="Redis安装步骤："><a href="#Redis安装步骤：" class="headerlink" title="Redis安装步骤："></a>Redis安装步骤：</h3><h3 id="1）安装C语言环境"><a href="#1）安装C语言环境" class="headerlink" title="1）安装C语言环境"></a>1）安装C语言环境</h3><p>使用yum自动安装：运行命令<strong>yum install gcc-c++</strong></p><h3 id="2）下载安装包"><a href="#2）下载安装包" class="headerlink" title="2）下载安装包"></a>2）下载安装包</h3><p>从<a href="https://redis.io/" target="_blank" rel="noopener">Redis官网</a>下载最新的Redis安装包，我是用的版本是redis-3.0.0<br>也可以从CSDN下载：<a href="http://download.csdn.net/download/eagleuniversityeye/10172505" target="_blank" rel="noopener">redis安装包</a></p><h3 id="3）解压安装包到"><a href="#3）解压安装包到" class="headerlink" title="3）解压安装包到"></a>3）解压安装包到</h3><p>解压文件到/usr/local目录下，也可以解压到别的目录<br>运行命令<strong>tar -xvf redis-3.0.0.tar.gz -C /usr/local</strong></p><h3 id="4）编译Redis"><a href="#4）编译Redis" class="headerlink" title="4）编译Redis"></a>4）编译Redis</h3><p>进入解压完毕的redis-3.0.0目录，运行<strong>make</strong>命令<br>redis-3.0.0目录目录下有一个Makefile文件，所以可以直接运行make命令使用C语言进行编译</p><p><img src="http://img.blog.csdn.net/20171225162015114?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="5）安装Redis"><a href="#5）安装Redis" class="headerlink" title="5）安装Redis"></a>5）安装Redis</h3><p>在redis-2.6.16目录中，运行<strong>make PREFIX=/usr/local/redis install</strong>命令安装redis到路径/usr/local/redis中，也可以安装到别的目录下</p><h3 id="6）完善配置文件"><a href="#6）完善配置文件" class="headerlink" title="6）完善配置文件"></a>6）完善配置文件</h3><p>拷贝redis-3.0.0中的配置文件 redis.conf 到Redis安装目录/usr/local/redis/bin中</p><h3 id="7）启动Redis（前端模式）"><a href="#7）启动Redis（前端模式）" class="headerlink" title="7）启动Redis（前端模式）"></a>7）启动Redis（前端模式）</h3><p>在bin目录下执行命令<strong>redis-server redis.conf</strong><br>显示如下表示安装成功可以使用，使用Ctrl+C退出</p><p><img src="http://img.blog.csdn.net/20171225163413521?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="8）远程连接redis"><a href="#8）远程连接redis" class="headerlink" title="8）远程连接redis"></a>8）远程连接redis</h3><p>在linux防火墙中开放Redis的默认端口6379<br>运行命令：<br><strong>/sbin/iptables -I INPUT -p tcp –dport 6379 -j ACCEPT</strong> 开放端口<br><strong>/etc/rc.d/init.d/iptables save</strong> 保存配置</p><h3 id="9）启动Redis（后端模式）"><a href="#9）启动Redis（后端模式）" class="headerlink" title="9）启动Redis（后端模式）"></a>9）启动Redis（后端模式）</h3><p>前端模式不易于操作，所以Redis启动常用后端模式，修改配置文件，redis.conf<br>进入redis.conf文件所在的目录：/usr/local/redis/bin，运行命令<strong>vi redis.conf</strong>，更改daemonize参数，默认是no，修改为yes，保存退出</p><p><img src="http://img.blog.csdn.net/20171225163722082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>再次进入redis的bin目录，运行命令<strong>./redis-server redis.conf</strong><br>没有任何显示表示后端模式启动成功</p><p><img src="http://img.blog.csdn.net/20171225164311886?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>#四.Redis配置文件redis.conf<br>Redis最主要的配置都在它的配置文件redis.conf中，启动Redis时需要指定使用那个配置文件。redis.conf中有很多设置是在应用中需要根据情况更改的，以下展示redis.conf中各种配置的含义（按文件中的顺序列举）</p><p><img src="http://img.blog.csdn.net/20171226191313679?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171226191324337?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171226191334057?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171226191348248?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br><img src="http://img.blog.csdn.net/20171226191436698?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NoSQL非关系型数据库的概念及最流行的非关系型数据库Redis数据库的安装&lt;br&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL/"/>
    
      <category term="Redis" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/NoSQL/Redis/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="非关系型数据库" scheme="http://yoursite.com/tags/%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Solr分析器IK-analyzer配置及错误java.lang.AbstractMethodError解决</title>
    <link href="http://yoursite.com/2018/04/16/Solr%E5%88%86%E6%9E%90%E5%99%A8IK-analyzer%E9%85%8D%E7%BD%AE%E5%8F%8A%E9%94%99%E8%AF%AFjava.lang.AbstractMethodError%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2018/04/16/Solr分析器IK-analyzer配置及错误java.lang.AbstractMethodError解决/</id>
    <published>2018-04-16T02:32:17.000Z</published>
    <updated>2018-12-26T11:56:16.927Z</updated>
    
    <content type="html"><![CDATA[<p>今天在给Solr配置IK-analyzer时报错，java.lang.AbstractMethodError，在网上查了查发现是IK版本过低，但是找了好久也没找到新版的，于是自己做了一个Jar包<br><a id="more"></a></p><h1 id="一-Solr使用中文分析器IK-analyzer时报错java-lang-AbstractMethodError"><a href="#一-Solr使用中文分析器IK-analyzer时报错java-lang-AbstractMethodError" class="headerlink" title="一.Solr使用中文分析器IK-analyzer时报错java.lang.AbstractMethodError"></a>一.Solr使用中文分析器IK-analyzer时报错java.lang.AbstractMethodError</h1><p>错误如下图所示</p><p><img src="http://img.blog.csdn.net/20180416222435094?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>原因是Solr的版本和IK-analyzer的版本不匹配，IK-analyzer版本过低，现在大家能够在网上下到的IK-analyzer版本一般都是IKAnalyzer2012FF_u1，这个版本已经相当老旧了，这里提供一个较新版本的IK-analyzer：<a href="https://download.csdn.net/download/eagleuniversityeye/10353515" target="_blank" rel="noopener">ik_analyzer_solr6</a></p><p>更换Jar后</p><p><img src="http://img.blog.csdn.net/20180416224716213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h1 id="二-IK-analyzer中文分析器"><a href="#二-IK-analyzer中文分析器" class="headerlink" title="二.IK-analyzer中文分析器"></a>二.IK-analyzer中文分析器</h1><p>IKAnalyzer是一个开源的，基于java语言开发的轻量级的中文分词工具包。它是以开源项目Lucene为应用主体的，结合词典分词和文法分析算法的中文分词组件。新版本的IKAnalyzer3.0则发展为 面向Java的公用分词组件，独立于Lucene项目，同时提供了对Lucene的默认优化实现。</p><p>使用Solr一般都会配置中文分析器，IKAnalyzer是应用最广的中文分析器，但是在网上能下载到IKAnalyzer版本都比较旧，这是因为这是个开源项目而且原作者好像不太想维护了，所以Solr不断更新，IKAnalyzer一直不更新，渐渐地IKAnalyzer就不能用了</p><p>不过，好在IKAnalyzer的作者把项目发布到了GitHub上，虽然没有见到IKAnalyzer的最新的Jar包但是这个项目还是更新了，而且Solr6可以使用，我fork了这个项目并把它打成了jar包，链接放到了上边</p><h1 id="三-IK-analyzer的配置"><a href="#三-IK-analyzer的配置" class="headerlink" title="三.IK-analyzer的配置"></a>三.IK-analyzer的配置</h1><p>##3.1 把中文分析器添加到工程中。<br>把ik-analyzer-solr6.jar文件添加到Tomcat中的solr工程的lib目录下<br>把扩展词典文件ext_stopword.dic、配置文件IKAnalyzer.cfg.xml放到solr工程的WEB-INF/classes目录下</p><p><img src="http://img.blog.csdn.net/20180416224809505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>##3.2 配置一个FieldType，制定使用IKAnalyzer<br>修改schema.xml文件（版本不同文件名称可能不同，6以上版本应该是managed-schema文件）<br>修改Solr的schema.xml文件，添加FieldType：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldType name=&quot;text_ik&quot; class=&quot;solr.TextField&quot;&gt;</span><br><span class="line">  &lt;analyzer class=&quot;org.wltea.analyzer.lucene.IKAnalyzer&quot;/&gt;</span><br><span class="line">&lt;/fieldType&gt;</span><br></pre></td></tr></table></figure><p>##3.3 配置业务域，type制定使用自定义的FieldType<br>设置业务系统Field，在schema.xml文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;field name=&quot;item_title&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;item_sell_point&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;item_price&quot;  type=&quot;long&quot; indexed=&quot;true&quot; stored=&quot;true&quot;/&gt;</span><br><span class="line">&lt;field name=&quot;item_image&quot; type=&quot;string&quot; indexed=&quot;false&quot; stored=&quot;true&quot; /&gt;</span><br><span class="line">&lt;field name=&quot;item_category_name&quot; type=&quot;string&quot; indexed=&quot;true&quot; stored=&quot;true&quot; /&gt;</span><br><span class="line">&lt;field name=&quot;item_keywords&quot; type=&quot;text_ik&quot; indexed=&quot;true&quot; stored=&quot;false&quot; multiValued=&quot;true&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;item_title&quot; dest=&quot;item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;item_sell_point&quot; dest=&quot;item_keywords&quot;/&gt;</span><br><span class="line">&lt;copyField source=&quot;item_category_name&quot; dest=&quot;item_keywords&quot;/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在给Solr配置IK-analyzer时报错，java.lang.AbstractMethodError，在网上查了查发现是IK版本过低，但是找了好久也没找到新版的，于是自己做了一个Jar包&lt;br&gt;
    
    </summary>
    
      <category term="Solr" scheme="http://yoursite.com/categories/Solr/"/>
    
    
      <category term="Solr" scheme="http://yoursite.com/tags/Solr/"/>
    
      <category term="IK-analyzer" scheme="http://yoursite.com/tags/IK-analyzer/"/>
    
      <category term="分析器" scheme="http://yoursite.com/tags/%E5%88%86%E6%9E%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JSP技术-02-内置对象_作用域_EL表达式_JSTL标签库</title>
    <link href="http://yoursite.com/2018/04/15/JSP%E6%8A%80%E6%9C%AF-02-%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1_%E4%BD%9C%E7%94%A8%E5%9F%9F_EL%E8%A1%A8%E8%BE%BE%E5%BC%8F_JSTL%E6%A0%87%E7%AD%BE%E5%BA%93%20/"/>
    <id>http://yoursite.com/2018/04/15/JSP技术-02-内置对象_作用域_EL表达式_JSTL标签库 /</id>
    <published>2018-04-15T02:32:17.000Z</published>
    <updated>2018-12-26T11:58:37.401Z</updated>
    
    <content type="html"><![CDATA[<p>和JSP相关的一些被封装的内容，主要涉及底层工作原理<br><a id="more"></a></p><h1 id="一-九大内置对象"><a href="#一-九大内置对象" class="headerlink" title="一.九大内置对象"></a>一.九大内置对象</h1><p>几乎每个JSP页面在处理数据时都要用到request，response，context等对象，所以，JSP2.0规范中定义9个内置对象（隐式对象），将在JSP中常用的对象封装成了内置对象。在JSP页面中，内置对象是由JSP默认创建的，可以直接在JSP页面中直接使用，不需要创建<br>9个内置对象的类型及功能：</p><table><thead><tr><th>名称</th><th style="text-align:center">类型</th><th>功能</th></tr></thead><tbody><tr><td>out</td><td style="text-align:center">javax.servlet.JspWriter</td><td>用于在页面中输出内容</td></tr><tr><td>request</td><td style="text-align:center">javax.servlet.http.HttpServletRequest</td><td>获取用户的请求信息</td></tr><tr><td>reponse</td><td style="text-align:center">javax.servlet.http.HttpServletResponse</td><td>服务器返回信息给浏览器</td></tr><tr><td>config</td><td style="text-align:center">javax.servlet.ServletConfig</td><td>封装了服务器的配置，可以用来获得初始化参数</td></tr><tr><td>session</td><td style="text-align:center">javax.servlet.http.HttpSession</td><td>可以用来获取服务器端存储的信息</td></tr><tr><td>application</td><td style="text-align:center">javax.servlet.ServletContext</td><td>所有请求共享的信息</td></tr><tr><td>page</td><td style="text-align:center">java.lang.Object</td><td>当前页面经过转换后的Servlet类的实例</td></tr><tr><td>pageContext</td><td style="text-align:center">javax.servlet.jsp.PageContext</td><td>JSP页面容器，可以用来或取该JSP页面中的属性和对象的值</td></tr><tr><td>exception</td><td style="text-align:center">java.lang.Throwable</td><td>JSP页面的异常信息</td></tr></tbody></table><h2 id="pageContext对象："><a href="#pageContext对象：" class="headerlink" title="pageContext对象："></a>pageContext对象：</h2><p>pageContext对象的功能：</p><p>1）可以用来获取其他内置对象</p><p>在JSP页面中，使用pageContext对象的getXXX方法可以获取JSP页面中的其他8个内置对象，如想要获取当前页面的request对象，可以调用pageContext的getPageContext( )方法。pageContext对象是javax.servlet.jsp.PageContext类的实例对象，它代表当前JSP页面的运行环境</p><p>2） 可以用来存储数据，pageContext对象存储数据是通过操作属性来实现的</p><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">void setAttribute(String name,Object value,int scope)</td><td style="text-align:left">用于设置pageContext对象的属性</td></tr><tr><td style="text-align:left">Object getAttribute(String name ,int scope)</td><td style="text-align:left">用于获取pageContext对象的属性</td></tr><tr><td style="text-align:left">Object findAttribute(String name)</td><td style="text-align:left">从4个域对象中查找名称为name的属相</td></tr></tbody></table><p>参数name指定属性名称，参数scope指定属性作用范围，作用范围参数可以是下面4个值（对应4大域，下面会细讲）</p><table><thead><tr><th style="text-align:left">属性值</th><th style="text-align:left">作用范围</th></tr></thead><tbody><tr><td style="text-align:left">PageContext.PAGE_SCOPE</td><td style="text-align:left">整个页面</td></tr><tr><td style="text-align:left">PageContext.PEQUEST_SCOPE</td><td style="text-align:left">一次请求</td></tr><tr><td style="text-align:left">PageContext.SESSION_SCOPE</td><td style="text-align:left">一次会话</td></tr><tr><td style="text-align:left">PageContext.APPLICATION</td><td style="text-align:left">整个web应用</td></tr></tbody></table><hr><p><strong>使用findAttribute( )方法查找域中的属性时，会按照page，request，session和application的顺序（范围越小，优先级越高）进行查找</strong></p><h1 id="二-四大域"><a href="#二-四大域" class="headerlink" title="二.四大域"></a>二.四大域</h1><p>“域”的本质是一块存储数据的区域，底层是一个map集合，集合的键是属性名，值是属性值。由于这个map集合是属于JSP中的对象的，而不同对象的生命周期和作用范围又不同，所以“域”的作用范围也不同，只能在固定的范围内存取值。<br>JSP页面中有4个对象常被用来存取，传递数据，它们被称为4大域<br>4大域的名称，类型及作用范围：</p><table><thead><tr><th style="text-align:left">属性值</th><th style="text-align:left">作用范围</th><th style="text-align:left">域名称</th><th style="text-align:left">域对象类型</th></tr></thead><tbody><tr><td style="text-align:left">PageScope</td><td style="text-align:left">当前页面</td><td style="text-align:left">pageContext</td><td style="text-align:left">PageContext</td></tr><tr><td style="text-align:left">RequestScope</td><td style="text-align:left">即从浏览器发出请求到服务器收到请求开始处理，通常只涉及一个页面，如果有请求的转发，则涉及多个页面</td><td style="text-align:left">request</td><td style="text-align:left">HttpServletRequest</td></tr><tr><td style="text-align:left">SessionScope</td><td style="text-align:left">浏览器和服务器的一次会话，可以在多个请求间共享数据</td><td style="text-align:left">session</td><td style="text-align:left">HttpSession</td></tr><tr><td style="text-align:left">Application</td><td style="text-align:left">整个项目范围，可以在多次会话间共享数据</td><td style="text-align:left">application</td><td style="text-align:left">ServletContext</td></tr></tbody></table><h1 id="三-EL表达式"><a href="#三-EL表达式" class="headerlink" title="三.EL表达式"></a>三.EL表达式</h1><p>EL全名为Expression Language，是一种简单易用的数据访问语言，EL表达式简化了获取Servlet域对象中数据的方式，使JSP页面中的代码更加简洁</p><h2 id="3-1-EL的语法"><a href="#3-1-EL的语法" class="headerlink" title="3.1 EL的语法"></a>3.1 EL的语法</h2><p>EL表达式的形式：${ 表达式 }</p><h2 id="3-2-EL表达式与内置对象"><a href="#3-2-EL表达式与内置对象" class="headerlink" title="3.2 EL表达式与内置对象"></a>3.2 EL表达式与内置对象</h2><h2 id="3-2-1-EL表达式可以获取4大域中的属性的值（直接调用域对象）"><a href="#3-2-1-EL表达式可以获取4大域中的属性的值（直接调用域对象）" class="headerlink" title="3.2.1 EL表达式可以获取4大域中的属性的值（直接调用域对象）"></a>3.2.1 EL表达式可以获取4大域中的属性的值（直接调用域对象）</h2><p>例如：获取页面中的name属性的值 { pageScope.name }</p><p>范例：使用EL表达式获取内置对象中的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%=pageContext.getAttribute(&quot;name&quot;)%&gt;</span><br><span class="line">&lt;%=request.getAttribute(&quot;name&quot;)%&gt;</span><br><span class="line">&lt;%=session.getAttribute(&quot;name&quot;)%&gt;</span><br><span class="line">&lt;%=application.getAttribute(&quot;name&quot;)%&gt;</span><br><span class="line"></span><br><span class="line">$&#123;pageScope.name&#125;</span><br><span class="line">$&#123;requestScope.name&#125;</span><br><span class="line">$&#123;sessionScope.name&#125;</span><br><span class="line">$&#123;applicationScope.name&#125;</span><br></pre></td></tr></table></figure></p><p>EL表达式获取其他内置对象中属性的值：</p><table><thead><tr><th style="text-align:left">分类</th><th style="text-align:left">使用的方法</th><th style="text-align:left">获取的值</th></tr></thead><tbody><tr><td style="text-align:left">请求参数</td><td style="text-align:left">param</td><td style="text-align:left">获得一个请求参数</td></tr><tr><td style="text-align:left">请求参数</td><td style="text-align:left">paramValues</td><td style="text-align:left">获得一组请求参数</td></tr><tr><td style="text-align:left">请求头</td><td style="text-align:left">header</td><td style="text-align:left">获得一个请求头</td></tr><tr><td style="text-align:left">请求头</td><td style="text-align:left">headerValues</td><td style="text-align:left">获得一组请求头</td></tr><tr><td style="text-align:left">JSP上下文对象</td><td style="text-align:left">pageContext</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">全局初始化参数</td><td style="text-align:left">initParam</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">cookie</td><td style="text-align:left">cookie</td></tr></tbody></table><h2 id="3-2-2-获取请求参数："><a href="#3-2-2-获取请求参数：" class="headerlink" title="3.2.2 获取请求参数："></a>3.2.2 获取请求参数：</h2><p>请求路径：<br>/e3mall/userServlet？method=login&amp;username=xxx&amp;password=123&amp;password=111<br>获取参数：</p><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">EL表达式</th></tr></thead><tbody><tr><td style="text-align:left">获取一个参数</td><td style="text-align:left">${param.username}</td></tr><tr><td style="text-align:left">获取一组参数</td><td style="text-align:left">${paramValues.password}</td></tr><tr><td style="text-align:left">获取一组参数中的一个</td><td style="text-align:left">${paramValues.password[0]}</td></tr></tbody></table><h2 id="3-2-3-获取请求头"><a href="#3-2-3-获取请求头" class="headerlink" title="3.2.3 获取请求头"></a>3.2.3 获取请求头</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">EL表达式</th></tr></thead><tbody><tr><td style="text-align:left">获取请求头中的host参数</td><td style="text-align:left">${header.accept}</td></tr><tr><td style="text-align:left">获取请求头中的编码参数（参数只有一个）</td><td style="text-align:left">${header[‘accept-Encoding’]</td></tr><tr><td style="text-align:left">获取请求头中的编码参数（参数为一个数组）</td><td style="text-align:left">${headerValues[‘accept-Encoding’][0]}</td></tr></tbody></table><h2 id="3-2-4-获取pageContext中的属性的值"><a href="#3-2-4-获取pageContext中的属性的值" class="headerlink" title="3.2.4 获取pageContext中的属性的值"></a>3.2.4 获取pageContext中的属性的值</h2><p>获取项目路径：</p><table><thead><tr><th style="text-align:left">使用JSP标签</th><th style="text-align:left">使用EL表达式</th></tr></thead><tbody><tr><td style="text-align:left">&lt;%=((HttpServletRequest)pageContext.getRequest()).getContextPath()%&gt;</td><td style="text-align:left">${ pageContext.request.contextPath }</td></tr></tbody></table><h2 id="3-2-5-获取项目的初始化参数（web-xml文件中的配置信息）"><a href="#3-2-5-获取项目的初始化参数（web-xml文件中的配置信息）" class="headerlink" title="3.2.5 获取项目的初始化参数（web.xml文件中的配置信息）"></a>3.2.5 获取项目的初始化参数（web.xml文件中的配置信息）</h2><p>web.xml文件的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">&lt;param-name&gt;namespace&lt;/param-name&gt;</span><br><span class="line">&lt;param-value&gt;/e3mall&lt;/param-value&gt;</span><br><span class="line">&lt;/context-param&gt;</span><br></pre></td></tr></table></figure><p>获取namespace参数的值：${ intitParam.person }<br>5.获取cookie中的值<br>${ cookie.loginUser }<br>EL获取cookie不是直接调用底层的方法，而是对底层方法进行了部分封装和加强。cookie没有根据属性名操作属性值的API，EL的底层使用request.getCookies( )获得所有cookie，然后遍历并存放到Map中（Map &lt; name,obj &gt;）</p><h1 id="四-JSTL技术："><a href="#四-JSTL技术：" class="headerlink" title="四.JSTL技术："></a>四.JSTL技术：</h1><p>JSTL全名为JSP Standard Tag Library ，即JSP标准标签库。使用JSP标签可以降低JSP页面的复杂度，增强代码的重用性，所以经常使用JSP的人就制作了很多自定义的JSP标签，但是制作这些标签的人并不属于同一个团队，所以有很多标签功能相同，导致学习和使用很不方便，为了方便开发者的使用，sun公司制作了一套标准标签库，即JSTL<br>JSTL是由5个不同功能的标签库组成的：</p><table><thead><tr><th style="text-align:left">标签库</th><th style="text-align:left">对应的URL</th><th style="text-align:left">标签前缀</th></tr></thead><tbody><tr><td style="text-align:left">Core</td><td style="text-align:left"><a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a></td><td style="text-align:left">c</td></tr><tr><td style="text-align:left">I18N</td><td style="text-align:left"><a href="http://java.sun.com/jsp/jstl/fmt" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/fmt</a></td><td style="text-align:left">fmt</td></tr><tr><td style="text-align:left">SQL</td><td style="text-align:left"><a href="http://java.sun.com/jsp/jstl/sql" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/sql</a></td><td style="text-align:left">sql</td></tr><tr><td style="text-align:left">XML</td><td style="text-align:left"><a href="http://java.sun.com/jsp/jstl/xml" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/xml</a></td><td style="text-align:left">x</td></tr><tr><td style="text-align:left">Functions</td><td style="text-align:left"><a href="http://java.sun.com/jsp/jstl/functions" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/functions</a></td><td style="text-align:left">fn</td></tr></tbody></table><p>常用的JSTL标签：</p><h2 id="4-1-if标签"><a href="#4-1-if标签" class="headerlink" title="4.1 if标签"></a>4.1 if标签</h2><p>用于执行判断</p><p>语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例一：</span><br><span class="line">&lt;c:if test=&quot;Boolean&quot;&gt;</span><br><span class="line">$&#123;param&#125;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure></p><p>Boolean的值为true则执行标签体中的内容，查找4大域中param属性的内容并显示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例二：</span><br><span class="line">&lt;c:if test=&quot;Boolean&quot; var=&quot;param&quot; scope=&quot;Scope&quot; [scope=&quot;&#123;page|request&#125;&quot;]&gt;</span><br><span class="line">$&#123;param&#125;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure></p><p>将Boolean的值（true或false）赋给param属性，并存放到指定的作用域，若Boolean的值为true执行标签体中内容</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">test属性</td><td style="text-align:left">用于设置逻辑表达式，逻辑表达式的计算结果为true则执行标签体中内容，为false则不执行</td></tr><tr><td style="text-align:left">var属性</td><td style="text-align:left">用于指定逻辑表达式的结果的名称</td></tr><tr><td style="text-align:left">scope属性</td><td style="text-align:left">用于指定var属性声明的变量的作用范围，默认值为page</td></tr></tbody></table><h2 id="4-2-forEach标签"><a href="#4-2-forEach标签" class="headerlink" title="4.2 forEach标签"></a>4.2 forEach标签</h2><p>用于迭代集合中的元素</p><p>1）基本语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例一：</span><br><span class="line">&lt;c:forEach var=&quot;item&quot; varStatus=&quot;status&quot; items=&quot;$&#123;pageBean&#125;&quot;&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; width=&quot;18%&quot;&gt;$&#123;status.count&#125;&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; width=&quot;17%&quot;&gt;$&#123;item.pname&#125;&lt;/td&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></p><p>迭代pageBean集合，并输出元素的序号（从1开始），及元素的pname属性的值</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">var属性</td><td style="text-align:left">指定当前迭代到的元素保存到page域中的名称</td></tr><tr><td style="text-align:left">items属性</td><td style="text-align:left">指定被迭代的集合对象</td></tr><tr><td style="text-align:left">varStatus属性</td><td style="text-align:left">指定存有当前迭代到的元素的信息的对象保存到page域中的名称</td></tr><tr><td style="text-align:left">begin属性</td><td style="text-align:left">指定从集合的第几个元素开始迭代，默认从0开始</td></tr><tr><td style="text-align:left">step属性</td><td style="text-align:left">指定迭代因子的增量</td></tr></tbody></table><hr><p>2）varStatus属性：</p><p>用于设置一个javax.servelt.jsp.jstl.core.LoopTagStatus类型的变量，这个变量包含了从集合中取出的元素的状态信息</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">返回值类型</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td style="text-align:left">count</td><td style="text-align:left">int</td><td style="text-align:left">元素在集合中的<strong>序号</strong>，从1开始计数</td></tr><tr><td style="text-align:left">index</td><td style="text-align:left">int</td><td style="text-align:left">元素在集合中的<strong>索引</strong>，从0开始计数</td></tr><tr><td style="text-align:left">first</td><td style="text-align:left">boolean</td><td style="text-align:left">是否是集合的第一个元素</td></tr><tr><td style="text-align:left">last</td><td style="text-align:left">boolean</td><td style="text-align:left">是否是集合的最后一个元素</td></tr></tbody></table><hr><p>3）迭代Map集合：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例二：</span><br><span class="line">&lt;c:forEach var=&quot;item&quot; items=&quot;$&#123;pageBean&#125;&quot;&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; width=&quot;18%&quot;&gt;$&#123;item.key&#125;&lt;/td&gt;</span><br><span class="line">&lt;td align=&quot;center&quot; width=&quot;17%&quot;&gt;$&#123;item.value&#125;&lt;/td&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure></p><p>迭代pageBean（Map集合）中的元素，将每个元素的key和value的值输出</p><p>迭代List和Set集合时，var声明的对象就是集合中的元素。而在迭代Map集合时，var声明的则是键和值的关系对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和JSP相关的一些被封装的内容，主要涉及底层工作原理&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JSP" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JSP/"/>
    
    
      <category term="JSP内置对象" scheme="http://yoursite.com/tags/JSP%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <link href="http://yoursite.com/2018/04/14/Hexo+GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/04/14/Hexo+GitHub搭建个人博客/</id>
    <published>2018-04-14T02:32:17.000Z</published>
    <updated>2018-12-26T11:57:36.496Z</updated>
    
    <content type="html"><![CDATA[<p>昨天做了这个个人博客，今天总结一下，把做法写成了这篇博客<br><a id="more"></a></p><h1 id="一-前言"><a href="#一-前言" class="headerlink" title="一.前言"></a>一.前言</h1><h3 id="1-Hexo和GitHub"><a href="#1-Hexo和GitHub" class="headerlink" title="1.Hexo和GitHub"></a>1.Hexo和GitHub</h3><p>你现在看到的就是我用GitHub Pages搭建的个人博客，主要用到的东西就是GitHub和Hexo，Hexo是一个博客框架，它的主要功能是根据配置文件和博客文章生成静态的网页，能够放在网站上供人浏览。GitHub就很著名了，我就不介绍了</p><h3 id="2-Hexo和GitHub需要的安装环境"><a href="#2-Hexo和GitHub需要的安装环境" class="headerlink" title="2.Hexo和GitHub需要的安装环境"></a>2.Hexo和GitHub需要的安装环境</h3><p>Hexo的使用需要先安装node.js，GitHub则需要在本地安装Git</p><p>在node.js官网进行下载安装文件有时会很慢，不相等可以从这里下<a href="https://download.csdn.net/download/eagleuniversityeye/10347965" target="_blank" rel="noopener">node.js安装包</a><br>Git的下载和配置在我的另一篇博客：<a href="https://blog.csdn.net/eagleuniversityeye/article/details/78693178" target="_blank" rel="noopener">Git安装配置与GitHub注册及简单使用</a></p><h1 id="二-Hexo的安装"><a href="#二-Hexo的安装" class="headerlink" title="二.Hexo的安装"></a>二.Hexo的安装</h1><p>前面的工作做好了以后，现在可以安装Hexo了。安装Hexo很简单，只需要几个命令就可以了。<br>新建一个文件夹，用于放置Hexo的程序文件，我建的文件路径是D:\BlogProject\hexo</p><p>运行命令：<code>npm install -g hexo-cli</code></p><p>此命令用来下载Hexo，需要花费一段时间，整个过程中需要等待的最久的一部，我等了5分钟，命令执行后D:\BlogProject\hexo路径下还没有文件</p><p><img src="http://img.blog.csdn.net/20180414092912765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>使用命令：<code>hexo -v</code></p><p>查看版本命令，如果出现以下信息说明Hexo已经成功下载</p><p><img src="http://img.blog.csdn.net/20180414092928598?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>使用命令：<code>hexo init</code></p><p>执行后Hexo的程序文件出现在D:\BlogProject\hexo文件中，出现下图红字圈出的一段话说明Hexo安装完成，可以使用了</p><p><img src="http://img.blog.csdn.net/20180414092937519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>运行命令：<code>hexo init</code></p><p>Hexo的运行还需要部分组件，运行此命令安装必要的组件，Hexo还支持集成第三方应用，第三方应用的使用常常也需要安装指定的组件</p><p><img src="http://img.blog.csdn.net/20180414093002460?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h1 id="三-Hexo的简单使用"><a href="#三-Hexo的简单使用" class="headerlink" title="三.Hexo的简单使用"></a>三.Hexo的简单使用</h1><h3 id="Hexo的命令"><a href="#Hexo的命令" class="headerlink" title="Hexo的命令"></a>Hexo的命令</h3><p>Hexo没有界面式的客户端，操作Hexo都是使用Hexo命令，下面介绍几个常用的Hexo命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Hexo clea 清空Hexo生成的静态页面</span><br><span class="line">2.Hexo g 根据配置文件及markdown文件生成静态页面</span><br><span class="line">3.Hexo d 将Hexo部署到远程服务器上</span><br><span class="line">4.Hexo s 在本地启动Hexo服务</span><br></pre></td></tr></table></figure><p>Hexo有很多命令，不过我用Hexo搭建博客全程只用到了上述4个命令，如果你想学其他命令，可以去Hexo的官网<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo官方文档</a></p><p><img src="http://img.blog.csdn.net/20180414095556417?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="使用Hexo命令操作Hexo"><a href="#使用Hexo命令操作Hexo" class="headerlink" title="使用Hexo命令操作Hexo"></a>使用Hexo命令操作Hexo</h3><p>既然Hexo已经安装好了，那就试用一下，使用默认配置<br>运行命令：<code>hexo g</code>，生成静态页面</p><p><img src="http://img.blog.csdn.net/20180414093012111?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>运行命令：<code>hexo s</code>，开启本地服务，这时可以通过4000端口访问Hexo生成的静态网页，Ctrl+C关闭服务后不能再访问</p><p><img src="http://img.blog.csdn.net/20180414093020811?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h1 id="四-Hexo连接GitHub"><a href="#四-Hexo连接GitHub" class="headerlink" title="四.Hexo连接GitHub"></a>四.Hexo连接GitHub</h1><h3 id="配置SSH-key"><a href="#配置SSH-key" class="headerlink" title="配置SSH key"></a>配置SSH key</h3><p>我们以上的工作使得我们可以在本地访问Hexo生成的博客，连接GitHub并部署到服务器后才能让所有人都能访问</p><p>向GitHub部署前，必须保证SSH key能够使用（SSH key可以理解为用于连接位于本地的Git和位于远程服务器的GitHub的一个工具），具体的操作请参见我的博客<a href="https://blog.csdn.net/eagleuniversityeye/article/details/78702189" target="_blank" rel="noopener">GitHub配置SSH key</a></p><h3 id="在GitHub创建Repositories"><a href="#在GitHub创建Repositories" class="headerlink" title="在GitHub创建Repositories"></a>在GitHub创建Repositories</h3><p>创建一个Repositories用于在GitHub的服务器部署Hexo的静态网页，对其原理有兴趣的可以百度GitHub Pages<br>注意创建的Repositories的名称是有特殊要求的，因为Hexo配置文件中的规定，所以需要按照特定的格式，即：<code>yoursite.github.io</code>，yoursite指的是你的GitHub的用户名（不是昵称）</p><p><img src="http://img.blog.csdn.net/20180414102346200?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>创建完成后在Hexo的根目录下（我的是：D:\BlogProject\hexo）找到_config.ym文件打开，这个文件是Hexo的总配置文件。</p><p>找到如下一段配置（我的是已经配置完成的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/JavaStudenttwo/JavaStudenttwo.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>按如上边我的示例进行配置，其中repository要填自己刚新建的repository的路径<br>点下图位置复制路径</p><p><img src="http://img.blog.csdn.net/20180414102913199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="将Hexo生成的静态网页部署到GitHub"><a href="#将Hexo生成的静态网页部署到GitHub" class="headerlink" title="将Hexo生成的静态网页部署到GitHub"></a>将Hexo生成的静态网页部署到GitHub</h3><p>只需要运行命令 <code>hexo d</code> 即可</p><p>然后在浏览器中输入网址“yoursite.github.io”（yousite指你的用户名）即可看到你的个人博客，但是页面真的很丑，不过Hexo可以更换主题，并进行其他功能的添加，这些操作在Hexo的官网上都有很详细的讲解<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Hexo官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天做了这个个人博客，今天总结一下，把做法写成了这篇博客&lt;br&gt;
    
    </summary>
    
      <category term="GitHub" scheme="http://yoursite.com/categories/GitHub/"/>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Nginx入门</title>
    <link href="http://yoursite.com/2018/04/13/Nginx%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/04/13/Nginx入门/</id>
    <published>2018-04-13T02:32:17.000Z</published>
    <updated>2018-12-26T11:59:03.960Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx是一种在大型项目中很常见的服务器，本文将对其进行简单的介绍<br><a id="more"></a></p><h1 id="一-Nginx简介"><a href="#一-Nginx简介" class="headerlink" title="一.Nginx简介"></a>一.Nginx简介</h1><p>Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定</p><h3 id="Nginx的主要应用"><a href="#Nginx的主要应用" class="headerlink" title="Nginx的主要应用"></a>Nginx的主要应用</h3><p>1，Nginx可以用来做http服务器。Nginx可以独立提供http服务，可以做网页静态服务器<br>2，Nginx可以用来做虚拟主机，实现在一台服务器虚拟出多个网站，例如个人网站使用的虚拟主机<br>3，Nginx可以用来提供反向代理，负载均衡功能。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用Nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况</p><h1 id="二-Nginx实现反向代理"><a href="#二-Nginx实现反向代理" class="headerlink" title="二.Nginx实现反向代理"></a>二.Nginx实现反向代理</h1><h2 id="2-1-反向代理的含义"><a href="#2-1-反向代理的含义" class="headerlink" title="2.1 反向代理的含义"></a>2.1 反向代理的含义</h2><p>常见的服务器一般采用正向代理的方式，如下图所示：</p><p><img src="http://img.blog.csdn.net/20180131220039001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。由于外部网络上的主机并不会配置并使用这个代理服务器，普通代理服务器也被设计为在Internet上搜寻多个不确定的服务器,而不是针对Internet上多个客户机的请求访问某一个固定的服务器，因此普通的Web代理服务器不支持外部对内部网络的访问请求</p><p>当一个代理服务器能够代理外部网络上的主机（如Nginx），访问内部网络时，这种代理服务的方式称为反向代理服务。此时代理服务器对外就表现为一个Web服务器，外部网络就可以简单把它当作一个标准的Web服务器而不需要特定的配置。不同之处在于，这个服务器没有保存任何网页的真实数据，所有的静态网页或者CGI程序，都保存在内部的Web服务器上</p><p>反向代理的实现方式如下图所示：</p><p><img src="http://img.blog.csdn.net/20180131220122380?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="2-2-简单模拟一个反向代理的实现"><a href="#2-2-简单模拟一个反向代理的实现" class="headerlink" title="2.2 简单模拟一个反向代理的实现"></a>2.2 简单模拟一个反向代理的实现</h2><h3 id="反向代理模拟："><a href="#反向代理模拟：" class="headerlink" title="反向代理模拟："></a>反向代理模拟：</h3><p>两个域名指向同一台nginx服务器，用户访问不同的域名显示不同的网页内容。<br>两个域名是<a href="http://www.sian.com.cn和www.sohu.com" target="_blank" rel="noopener">www.sian.com.cn和www.sohu.com</a><br>nginx服务器使用虚拟机192.168.101.3 </p><p><img src="http://img.blog.csdn.net/20180131220813978?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><p>第一步：安装两个tomcat，分别运行在8080和8081端口。<br>第二步：启动两个tomcat。<br>第三步：反向代理服务器的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat1 &#123;</span><br><span class="line">server 192.168.25.148:8080;</span><br><span class="line">   &#125;</span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  www.sina.com.cn;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass   http://tomcat1;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   upstream tomcat2 &#123;</span><br><span class="line">server 192.168.25.148:8081;</span><br><span class="line">   &#125;</span><br><span class="line">   server &#123;</span><br><span class="line">       listen       80;</span><br><span class="line">       server_name  www.sohu.com;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line">           proxy_pass   http://tomcat2;</span><br><span class="line">           index  index.html index.htm;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>第四步：nginx重新加载配置文件<br>第五步：配置域名<br>在hosts文件中添加域名和ip的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.25.148 www.sina.com.cn</span><br><span class="line">192.168.25.148 www.sohu.com</span><br></pre></td></tr></table></figure><h1 id="三-Nginx实现负载均衡"><a href="#三-Nginx实现负载均衡" class="headerlink" title="三.Nginx实现负载均衡"></a>三.Nginx实现负载均衡</h1><h2 id="3-1-Nginx实现负载均衡的基本原理"><a href="#3-1-Nginx实现负载均衡的基本原理" class="headerlink" title="3.1 Nginx实现负载均衡的基本原理"></a>3.1 Nginx实现负载均衡的基本原理</h2><p>如果一个服务由多条服务器提供，需要把负载分配到不同的服务器处理，需要负载均衡处理<br>Nginx配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat2 &#123;</span><br><span class="line">server 192.168.25.148:8081;</span><br><span class="line">server 192.168.25.148:8082;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以根据服务器的实际情况调整服务器权重。权重越高分配的请求越多，权重越低，请求越少。默认是都是1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat2 &#123;</span><br><span class="line">server 192.168.25.148:8081;</span><br><span class="line">server 192.168.25.148:8082 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Nginx实现负载均衡的具体方法"><a href="#3-2-Nginx实现负载均衡的具体方法" class="headerlink" title="3.2 Nginx实现负载均衡的具体方法"></a>3.2 Nginx实现负载均衡的具体方法</h2><h3 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h3><p>Nginx作为负载均衡器，所有请求都到了Nginx，可见Nginx处于非常重点的位置，如果Nginx服务器宕机后端web服务将无法提供服务，影响严重。<br>为了屏蔽负载均衡服务器的宕机，需要建立一个备份机。主服务器和备份机上都运行高可用（High Availability）监控程序，通过传送诸如“I am alive”这样的信息来监控对方的运行状况。当备份机不能在一定的时间内收到这样的信息时，它就接管主服务器的服务IP并继续提供负载均衡服务；当备份管理器又从主管理器收到“I am alive”这样的信息时，它就释放服务IP地址，这样的主服务器就开始再次提供负载均衡服务。</p><h3 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h3><h4 id="keepalived简介"><a href="#keepalived简介" class="headerlink" title="keepalived简介"></a>keepalived简介</h4><p>keepalived是集群管理中保证集群高可用的一个服务软件，用来防止单点故障。<br>     Keepalived的作用是检测web服务器的状态，如果有一台web服务器死机，或工作出现故障，Keepalived将检测到，并将有故障的web服务器从系统中剔除，当web服务器工作正常后Keepalived自动将web服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的web服务器。</p><h4 id="keepalived工作原理"><a href="#keepalived工作原理" class="headerlink" title="keepalived工作原理"></a>keepalived工作原理</h4><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。<br>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（VIP = Virtual IP Address，虚拟IP地址，该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到VRRP包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。<br>keepalived主要有三个模块，分别是core、check和VRRP。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。VRRP模块是来实现VRRP协议的。 </p><h3 id="负载均衡示意图"><a href="#负载均衡示意图" class="headerlink" title="负载均衡示意图"></a>负载均衡示意图</h3><p>正常工作时：</p><p><img src="http://img.blog.csdn.net/20180131221648074?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>发生主机宕机等意外情况时：</p><p><img src="http://img.blog.csdn.net/20180131221658479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>主机故障排除后：</p><p><img src="http://img.blog.csdn.net/20180131221705364?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx是一种在大型项目中很常见的服务器，本文将对其进行简单的介绍&lt;br&gt;
    
    </summary>
    
      <category term="Nginx服务器" scheme="http://yoursite.com/categories/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统Tomcat无法正常启动</title>
    <link href="http://yoursite.com/2018/04/13/CentOS7.3%E7%B3%BB%E7%BB%9FTomcat%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3%EF%BC%888005%E7%AB%AF%E5%8F%A3%E4%B8%8D%E8%83%BD%E5%90%AF%E5%8A%A8%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/13/CentOS7.3系统Tomcat无法正常启动解决（8005端口不能启动）/</id>
    <published>2018-04-13T01:32:17.000Z</published>
    <updated>2018-12-26T11:57:07.302Z</updated>
    
    <content type="html"><![CDATA[<p>我今天在阿里云买了一个服务器，使用CentOS7系统，在安装Tomcat是遇到错误排查了很长时间，在这里将错误总结记叙一下<br><a id="more"></a><br>Linux系统CentOS7.3版中启动Tomcat7，确定JDK正常运行且配置正确的情况下，启动Tomcat始终无法正常访问</p><h1 id="排错过程："><a href="#排错过程：" class="headerlink" title="排错过程："></a>排错过程：</h1><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>关闭Tomcat，使用端口查看命令netstat -tunlp查看</p><p><img src="http://img.blog.csdn.net/20180411154909916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>发现8080端口，8009端口，8005端口均为被占用</p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>启动Tomcat，使用端口查看命令netstat -tunlp查看，发现8080端口，8009端口正常启动，没有发现8005端口，使用netstat -tunlp|grep 8005命令查看，确定8005端口没有被占用，所以一定是8005端口是没有正常启动</p><p><img src="http://img.blog.csdn.net/20180411154144291?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><p>需要修改文件：$JAVA_HOME/jre/lib/security/java.security中的配置<br>使用vi编辑器打开文件</p><p><img src="http://img.blog.csdn.net/20180411155300271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>将：securerandom.source=file:/dev/random<br>改为： securerandom.source=file:/dev/urandom</p><p>注：可以使用/securerandom.source查找，n表示下一目标位置</p><p>重启Tomcat，发现3个端口均正常启动</p><p><img src="http://img.blog.csdn.net/20180411154206094?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我今天在阿里云买了一个服务器，使用CentOS7系统，在安装Tomcat是遇到错误排查了很长时间，在这里将错误总结记叙一下&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="CentOS7" scheme="http://yoursite.com/tags/CentOS7/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap前端框架</title>
    <link href="http://yoursite.com/2018/04/11/Bootstrap%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/04/11/Bootstrap前端框架/</id>
    <published>2018-04-11T02:32:17.000Z</published>
    <updated>2018-12-26T11:56:57.042Z</updated>
    
    <content type="html"><![CDATA[<p>Bootstrap框架的介绍及简单使用<br><a id="more"></a></p><h1 id="一-BootStrap简介"><a href="#一-BootStrap简介" class="headerlink" title="一.BootStrap简介"></a>一.BootStrap简介</h1><p>Bootstrap，来自 Twitter，是目前很受欢迎的前端框架。Bootstrap 是基于 HTML、CSS、JavaScript 的CSS/HTML框架，它简洁灵活，使得 Web 开发更加快捷。Bootstrap提供了优雅的HTML和CSS规范，由动态CSS语言Less写成<br>Bootstrap预定义一套CSS样式和与样式相对应的JQuery代码，开发者只需要提供固定的HTML结构，添加固定的class样式，就可以完成指定效果的实现<br>Bootstrap非常好的实现了响应式布局（解决移动互联网浏览提供的一种方案），使一个网站能兼容多个终端（手机，iPad等），使用Bootstrap制作的网站不用制定多个版本，也能为不同终端的用户提供很好的用户体验</p><h1 id="二-BootStrap入门"><a href="#二-BootStrap入门" class="headerlink" title="二.BootStrap入门"></a>二.BootStrap入门</h1><p>Bootstrap的官方网站上有非常详细的教程，给出了很多实例和模板，想使用Bootstrap只需要看Bootstrap官网上的教程即可<br><a href="http://www.bootcss.com/" target="_blank" rel="noopener">Bootstrap官网链接</a></p><p>打开官网</p><p><img src="http://img.blog.csdn.net/20171011195400489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>点击页面中央的中文文档，打开教程页</p><p><img src="http://img.blog.csdn.net/20171011201742147?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>教程页的导航栏中将Bootstrap的教程分为了几个部分，前4个部分的内容即可让不懂Bootstrap初学者能够简单使用Bootstrap<br>第1部分起步讲的是Bootstrap的下载，安装（导入到项目中），及环境的配置。<br>第2，3，4部分则是用具体的Demo对Bootstrap的各种样式和效果的列举展示，每个Demo都有相应的代码，使用者只需要将需要的代码粘贴到自己的项目中然后做相应的修改即可</p><h1 id="三-BootStrap导入项目及环境配置"><a href="#三-BootStrap导入项目及环境配置" class="headerlink" title="三.BootStrap导入项目及环境配置"></a>三.BootStrap导入项目及环境配置</h1><h2 id="3-1-Bootstrap下载"><a href="#3-1-Bootstrap下载" class="headerlink" title="3.1 Bootstrap下载"></a>3.1 Bootstrap下载</h2><p>在起步部分，可以看到BootStrap的下载选项</p><p><img src="http://img.blog.csdn.net/20171011203208031?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>如果只是使用该框架的话，选择第一项编译完成，不包含源码及文件的Bootstrap即可</p><p>下载完成后得到一个名称中带有dist的文件夹</p><p><img src="http://img.blog.csdn.net/20171011203523160?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>版本不同名称可能不同，我下载的是3.3.7版本，此文件的目录结构下如图，css文件夹下放置的是Bootstrap的样式文件，js文件夹下放置的是Bootstrap的核心文件，fonts文件夹下则是和字体相关的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">bootstrap/</span><br><span class="line">├── css/</span><br><span class="line">│   ├── bootstrap.css</span><br><span class="line">│   ├── bootstrap.css.map</span><br><span class="line">│   ├── bootstrap.min.css</span><br><span class="line">│   ├── bootstrap.min.css.map</span><br><span class="line">│   ├── bootstrap-theme.css</span><br><span class="line">│   ├── bootstrap-theme.css.map</span><br><span class="line">│   ├── bootstrap-theme.min.css</span><br><span class="line">│   └── bootstrap-theme.min.css.map</span><br><span class="line">├── js/</span><br><span class="line">│   ├── bootstrap.js</span><br><span class="line">│   └── bootstrap.min.js</span><br><span class="line">└── fonts/</span><br><span class="line">    ├── glyphicons-halflings-regular.eot</span><br><span class="line">    ├── glyphicons-halflings-regular.svg</span><br><span class="line">    ├── glyphicons-halflings-regular.ttf</span><br><span class="line">    ├── glyphicons-halflings-regular.woff</span><br><span class="line">    └── glyphicons-halflings-regular.woff2</span><br></pre></td></tr></table></figure><h2 id="3-2-搭建Bootstrap环境"><a href="#3-2-搭建Bootstrap环境" class="headerlink" title="3.2 搭建Bootstrap环境"></a>3.2 搭建Bootstrap环境</h2><p>将以上3个文件夹和其中的文件放置到wabapp目录下。因为Bootstrap中运用了很多JQuery插件的内容，所以Bootstrap正常使用必须还要导入JQuery的核心文件（版本不能老，否则Bootstrap某些功能不能正常使用）</p><h2 id="3-3-在页面文件中进行Bootstrap的基本设置"><a href="#3-3-在页面文件中进行Bootstrap的基本设置" class="headerlink" title="3.3 在页面文件中进行Bootstrap的基本设置"></a>3.3 在页面文件中进行Bootstrap的基本设置</h2><p>在Bootstrap官网教程的起步部分，给出了Bootstrap的模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span><br><span class="line">    &lt;title&gt;Bootstrap 101 Template&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap --&gt;</span><br><span class="line">    &lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;</span><br><span class="line">    &lt;!-- WARNING: Respond.js doesn&apos;t work if you view the page via file:// --&gt;</span><br><span class="line">    &lt;!--[if lt IE 9]&gt;</span><br><span class="line">      &lt;script src=&quot;https://cdn.bootcss.com/html5shiv/3.7.3/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script src=&quot;https://cdn.bootcss.com/respond.js/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;![endif]--&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;h1&gt;你好，世界！&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- jQuery (necessary for Bootstrap&apos;s JavaScript plugins) --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- Include all compiled plugins (below), or include individual files as needed --&gt;</span><br><span class="line">    &lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>模板中需要注意的几点：<br>1）媒体设置，三个&lt; meta &gt;标签，是Bootstrap进行响应式开发必须要有的设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br></pre></td></tr></table></figure><p>2）导入Bootstrap的支持文件，包括Bootstrap的样式文件，JQuery核心文件和Bootstrap的核心文件（此模板中的文件路径使用的是网络路径，可以根据使用情况改为本地路径）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcss.com/jquery/1.12.4/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-响应式布局相关的设置"><a href="#3-4-响应式布局相关的设置" class="headerlink" title="3.4 响应式布局相关的设置"></a>3.4 响应式布局相关的设置</h2><p>Bootstrap在3个&lt; meta &gt; 标签中设置和响应式布局相关的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>其中name=”viewport”的标签中的设置比较重要<br>viewport指的是设备的屏幕上用来显示网页的区域<br>content的设置参数：</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">属性描述</th><th style="text-align:left">举例</th></tr></thead><tbody><tr><td style="text-align:left">width</td><td style="text-align:left">设置layout viewport的宽度，可以是一个正整数，也可以是字符串”width-device”(即根据设备宽度自动缩放)</td><td style="text-align:left">width=800px或width=device-width(常用)</td></tr><tr><td style="text-align:left">initial-scale</td><td style="text-align:left">设置页面的初始缩放值，为一个数字，可以带小数</td><td style="text-align:left">initial-scale=1(1表示按1:1缩放)</td></tr><tr><td style="text-align:left">minimum-scale</td><td style="text-align:left">允许用户的最小缩放值，为一个数字，可以带小数</td><td style="text-align:left">minimum-scale=0.5</td></tr><tr><td style="text-align:left">maximum-scale</td><td style="text-align:left">允许用户的最大缩放值，为一个数字，可以带小数</td><td style="text-align:left">maximum-scale=1.5</td></tr><tr><td style="text-align:left">height</td><td style="text-align:left">设置layout viewport的高度，这个属性并不重要，很少使用</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">user-scalable</td><td style="text-align:left">是否允许用户进行缩放，值为”no”或”yes”, no代表不允许,yes代表允许</td><td style="text-align:left">user-scalable=yes(如果选no上面的设置全废了)</td></tr></tbody></table><h1 id="四-Bootstrap导学"><a href="#四-Bootstrap导学" class="headerlink" title="四.Bootstrap导学"></a>四.Bootstrap导学</h1><p>由于Bootstrap的官网给了非常详细的教程，下面根据教程做几个示例示范一下如何使用该教程Bootstrap，如果需要使用Bootstrap，直接看官网教程即可</p><h2 id="4-1-分页条"><a href="#4-1-分页条" class="headerlink" title="4.1 分页条"></a>4.1 分页条</h2><p><a href="https://github.com/JavaStudenttwo/HeimaShop.git" target="_blank" rel="noopener">黑马商城</a>商品分类分页展示部分，未使用Bootstrap时的效果：</p><p><img src="http://img.blog.csdn.net/20171011222613882?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>JSP代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;paginationId&quot; style=&quot;font-size:14px;margin:0;display:block;&quot;&gt;</span><br><span class="line"></span><br><span class="line">第$&#123;pageBean.pageNumber&#125;/$&#123;pageBean.totalPage&#125;页&amp;nbsp;</span><br><span class="line">总项数:$&#123;pageBean.totalRecord&#125;&amp;nbsp;</span><br><span class="line">每页显示:$&#123;pageBean.pageSize&#125;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber gt 1&#125;&quot;&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=1&quot;&gt;[首页]</span><br><span class="line">&lt;/a&gt;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=$&#123;pageBean.pageNumber-1&#125;&quot;&gt;</span><br><span class="line">[上一页]&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach var=&quot;i&quot; begin=&quot;1&quot; end=&quot;$&#123;pageBean.totalPage&#125;&quot;&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber eq i&#125;&quot;&gt;</span><br><span class="line">第$&#123;i&#125;页</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber != i&#125;&quot;&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=$&#123;i&#125;&quot;&gt;第$&#123;i&#125;页&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;/c:forEach&gt;&amp;nbsp;</span><br><span class="line"></span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber lt pageBean.totalPage&#125;&quot;&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=$&#123;pageBean.pageNumber+1&#125;&quot;&gt;[下一页]</span><br><span class="line">&lt;/a&gt;&amp;nbsp;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=$&#123;pageBean.totalPage&#125;&quot;&gt;</span><br><span class="line">[尾页]&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>查看Bootstrap官方教程，1.在导航栏中选择组件部分</p><p><img src="http://img.blog.csdn.net/20171011223057835?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>2.根据右侧内容提纲找到分页部分，3.复制默认分页代码</p><p><img src="http://img.blog.csdn.net/20171011223132022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>在默认效果上进行更改及添加，完善后的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;nav aria-label=&quot;Page navigation&quot;&gt;</span><br><span class="line">&lt;ul class=&quot;pagination&quot;&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;!(pageBean.pageNumber gt 1)&#125;&quot;&gt;</span><br><span class="line">&lt;li class=&quot;disabled&quot;&gt;</span><br><span class="line">&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber gt 1&#125;&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=$&#123;pageBean.pageNumber-1&#125;&quot; aria-label=&quot;Previous&quot;&gt;</span><br><span class="line">&lt;span aria-hidden=&quot;true&quot;&gt;&amp;laquo;&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach var=&quot;i&quot; begin=&quot;1&quot; end=&quot;$&#123;pageBean.totalPage&#125;&quot;&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber eq i&#125;&quot;&gt;</span><br><span class="line">&lt;%--&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;$&#123;i&#125;&lt;/a&gt;&lt;/li&gt;--%&gt;</span><br><span class="line">&lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;$&#123;i&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber != i&#125;&quot;&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=$&#123;i&#125;&quot;&gt;$&#123;i&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:if test=&quot;$&#123;pageBean.pageNumber lt pageBean.totalPage&#125;&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;a href=&quot;$&#123;pageContext.request.contextPath&#125;/productServlet?method=productList&amp;cid=$&#123;pageBean.data[0].cid&#125;&amp;pageNumber=$&#123;pageBean.pageNumber+1&#125;&quot; aria-label=&quot;Next&quot;&gt;</span><br><span class="line">&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123; !(pageBean.pageNumber lt pageBean.totalPage)&#125;&quot;&gt;</span><br><span class="line">&lt;li class=&quot;disabled&quot;&gt;</span><br><span class="line">&lt;span aria-hidden=&quot;true&quot;&gt;&amp;raquo;&lt;/span&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/nav&gt;</span><br></pre></td></tr></table></figure><p>加入Bootstrap样式后的分页栏效果：</p><p><img src="http://img.blog.csdn.net/20171011223641543?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bootstrap框架的介绍及简单使用&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Bootstrap" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Bootstrap/"/>
    
    
      <category term="Bootstrap" scheme="http://yoursite.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Maven-01-私服搭建及使用</title>
    <link href="http://yoursite.com/2018/04/07/Maven-01-%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/07/Maven-01-私服搭建及使用/</id>
    <published>2018-04-07T02:32:17.000Z</published>
    <updated>2018-12-26T11:58:52.771Z</updated>
    
    <content type="html"><![CDATA[<p>Maven私服的概念，私服搭建及使用<br><a id="more"></a></p><h1 id="一-Maven私服简介"><a href="#一-Maven私服简介" class="headerlink" title="一.Maven私服简介"></a>一.Maven私服简介</h1><p>Maven私服是Maven仓库的一种，Maven仓库有三种，分别是本地仓库，远程仓库（私服），中央仓库。<br>Maven私服一般都是由公司或团体为方便内部使用而搭建的，一般部署在局域网中，所以在局域网中使用私服下载jar包的速度比中央仓库方便。而且公司或组织的不方便公开的项目部署在私服中也比较安全。正因为这些优点，私服在企业中的应用非常广泛</p><h1 id="二-Maven私服搭建"><a href="#二-Maven私服搭建" class="headerlink" title="二.Maven私服搭建"></a>二.Maven私服搭建</h1><p>##2.1 下载nexus<br>从官网下载nexus的最新版本，nexus是用Java语言开发的用来搭建Maven私服的一款BS结构的软件，即nexus是通过浏览器来管理jar包的<br>如果官网下载速度过慢，也可以在CSDN上下载<a href="http://download.csdn.net/download/eagleuniversityeye/10171952" target="_blank" rel="noopener">nexus下载</a><br>解压nexus的压缩包，其内容如下，我是用的是nexus的2.12版本</p><p><img src="http://img.blog.csdn.net/20171223212918641?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>如上图，进入nexus的bin目录下，使用<strong>管理员方式</strong>打开命令行，因为nexus在安全方面做了很多工作，所以安装使用必须要有管理员权限</p><h2 id="2-2-运行命令安装软件并开启服务"><a href="#2-2-运行命令安装软件并开启服务" class="headerlink" title="2.2 运行命令安装软件并开启服务"></a>2.2 运行命令安装软件并开启服务</h2><p><strong>nexus.bat install</strong>命令<br>安装nexus<br><strong>nexus.bat start</strong>命令<br>开启nexus服务</p><p><img src="http://img.blog.csdn.net/20171223205932408?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="2-3-使用浏览器访问nexus"><a href="#2-3-使用浏览器访问nexus" class="headerlink" title="2.3 使用浏览器访问nexus"></a>2.3 使用浏览器访问nexus</h2><p>打开浏览器，输入地址<a href="http://localhost:8081/nexus/" target="_blank" rel="noopener">http://localhost:8081/nexus/</a> （nexus的默认端口是8081），登录nexus，点击右上角的login（nexus有一个默认管理员：用户名admin，密码admin123），登录成功后如下图所示，即Maven私服的管理界面</p><p><img src="http://img.blog.csdn.net/20171223210138775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h1 id="三-Maven私服使用"><a href="#三-Maven私服使用" class="headerlink" title="三.Maven私服使用"></a>三.Maven私服使用</h1><h2 id="3-1-将Maven项目打包并上传到到Maven私服"><a href="#3-1-将Maven项目打包并上传到到Maven私服" class="headerlink" title="3.1 将Maven项目打包并上传到到Maven私服"></a>3.1 将Maven项目打包并上传到到Maven私服</h2><h3 id="3-1-1-修改Maven配置文件"><a href="#3-1-1-修改Maven配置文件" class="headerlink" title="3.1.1 修改Maven配置文件"></a>3.1.1 修改Maven配置文件</h3><p>在Maven的配置文件setting.xml中配置管理员用户名和密码。<br>在<code>&lt;servers&gt;</code>标签下添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">&lt;/server&gt;</span><br><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">    &lt;username&gt;admin&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;admin123&lt;/password&gt;</span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-1-2-修改项目配置文件pom-xml"><a href="#3-1-2-修改项目配置文件pom-xml" class="headerlink" title="3.1.2 修改项目配置文件pom.xml"></a>3.1.2 修改项目配置文件pom.xml</h3><p>添加Maven私服的相关信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &lt;distributionManagement&gt;</span><br><span class="line"> &lt;repository&gt;</span><br><span class="line"> &lt;id&gt;releases&lt;/id&gt;</span><br><span class="line">&lt;url&gt;http://localhost:8081/nexus/content/repositories/releases/&lt;/url&gt;</span><br><span class="line"> &lt;/repository&gt; </span><br><span class="line"> &lt;snapshotRepository&gt;</span><br><span class="line"> &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class="line">&lt;url&gt;http://localhost:8081/nexus/content/repositories/snapshots/&lt;/url&gt;</span><br><span class="line"> &lt;/snapshotRepository&gt; </span><br><span class="line"> &lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure><h3 id="3-1-3-发布项目到私服"><a href="#3-1-3-发布项目到私服" class="headerlink" title="3.1.3 发布项目到私服"></a>3.1.3 发布项目到私服</h3><p>只用执行Maven命令deploy即可完成项目的打包和发布等一系列动作</p><h2 id="3-2-从Maven私服下载jar包"><a href="#3-2-从Maven私服下载jar包" class="headerlink" title="3.2 从Maven私服下载jar包"></a>3.2 从Maven私服下载jar包</h2><p>如何从Maven私服自动下载所需的依赖文件呢？需要进行一些配置</p><h3 id="修改Maven配置文件"><a href="#修改Maven配置文件" class="headerlink" title="修改Maven配置文件"></a>修改Maven配置文件</h3><p>在Maven的配置文件setting.xml中配置Maven私服的相关信息<br>在<code>&lt;profile&gt;</code>标签下添加如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;profile&gt;   </span><br><span class="line">&lt;!--profile的id--&gt;</span><br><span class="line">    &lt;id&gt;dev&lt;/id&gt;   </span><br><span class="line">    &lt;repositories&gt;   </span><br><span class="line">      &lt;repository&gt;  </span><br><span class="line">&lt;!--仓库id，repositories可以配置多个仓库，保证id不重复--&gt;</span><br><span class="line">        &lt;id&gt;nexus&lt;/id&gt;   </span><br><span class="line">&lt;!--仓库地址，即nexus仓库组的地址--&gt;</span><br><span class="line">        &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;   </span><br><span class="line">&lt;!--是否下载releases构件--&gt;</span><br><span class="line">        &lt;releases&gt;   </span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;   </span><br><span class="line">        &lt;/releases&gt;   </span><br><span class="line">&lt;!--是否下载snapshots构件--&gt;</span><br><span class="line">        &lt;snapshots&gt;   </span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;   </span><br><span class="line">        &lt;/snapshots&gt;   </span><br><span class="line">      &lt;/repository&gt;   </span><br><span class="line">    &lt;/repositories&gt;  </span><br><span class="line"> &lt;pluginRepositories&gt;  </span><br><span class="line">    &lt;!-- 插件仓库，maven的运行依赖插件，也需要从私服下载插件 --&gt;</span><br><span class="line">        &lt;pluginRepository&gt;  </span><br><span class="line">        &lt;!-- 插件仓库的id不允许重复，如果重复后边配置会覆盖前边 --&gt;</span><br><span class="line">            &lt;id&gt;public&lt;/id&gt;  </span><br><span class="line">    &lt;name&gt;Public Repositories&lt;/name&gt;  </span><br><span class="line">    &lt;url&gt;http://localhost:8081/nexus/content/groups/public/&lt;/url&gt;  </span><br><span class="line">       &lt;/pluginRepository&gt;  </span><br><span class="line">   &lt;/pluginRepositories&gt;  </span><br><span class="line">&lt;/profile&gt;  </span><br><span class="line"></span><br><span class="line">&lt;activeProfiles&gt;</span><br><span class="line">   &lt;activeProfile&gt;dev&lt;/activeProfile&gt;</span><br><span class="line">&lt;/activeProfiles&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Maven私服的概念，私服搭建及使用&lt;br&gt;
    
    </summary>
    
      <category term="Maven" scheme="http://yoursite.com/categories/Maven/"/>
    
      <category term="私服搭建" scheme="http://yoursite.com/categories/Maven/%E7%A7%81%E6%9C%8D%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Maven私服" scheme="http://yoursite.com/tags/Maven%E7%A7%81%E6%9C%8D/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-zTree插件使用</title>
    <link href="http://yoursite.com/2018/04/02/jQuery-zTree%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/02/jQuery-zTree插件使用/</id>
    <published>2018-04-02T02:32:17.000Z</published>
    <updated>2018-12-26T11:58:11.319Z</updated>
    
    <content type="html"><![CDATA[<p>在页面中使用zTree插件添加菜单栏功能<br><a id="more"></a></p><h1 id="一-zTree插件入门"><a href="#一-zTree插件入门" class="headerlink" title="一.zTree插件入门"></a>一.zTree插件入门</h1><h2 id="1-zTree简介"><a href="#1-zTree简介" class="headerlink" title="1.zTree简介"></a>1.zTree简介</h2><p>ZTree 是一个依靠 jQuery 实现的多功能 “树插件”。优异的性能、灵活的配置、多种功能的组合是 ZTree 最大优点。</p><h2 id="2-zTree插件的核心文件"><a href="#2-zTree插件的核心文件" class="headerlink" title="2.zTree插件的核心文件"></a>2.zTree插件的核心文件</h2><p>ztree官网：在地址栏中输入ztree.me</p><p>ztree官网可以查看在线API，也可以下载最新的ztree插件包（放置在码云上）</p><p><img src="http://img.blog.csdn.net/20170924122607766?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>下载ztree插件包，目录结构如下，其中api文件夹下是ztree插件的离线API文档，css文件夹下是ztree插件的样式文件，demo文件夹下有ztree插件实现的效果的展示，js文件夹下是ztree插件的核心文件</p><p><img src="http://img.blog.csdn.net/20170924122936440?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>打开js文件夹，发现其中有一个jquery的核心文件，说明ztree的使用需要jquery核心的支持。其他10个文件则是ztree的核心文件，这10文件实际上是5个文件，因为每个文件都有一个完整版和一个简洁版（名称中带有.min），简洁版是在完整版的基础上去掉所有空格和换行，为节省空间而创建的，两者代码仍是相同的。</p><p><img src="http://img.blog.csdn.net/20170924123218252?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="3-zTree插件的API"><a href="#3-zTree插件的API" class="headerlink" title="3.zTree插件的API"></a>3.zTree插件的API</h2><p><img src="http://img.blog.csdn.net/20170923213414076?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="API的主要内容："><a href="#API的主要内容：" class="headerlink" title="API的主要内容："></a>API的主要内容：</h3><h4 id="1-zTree的方法"><a href="#1-zTree的方法" class="headerlink" title="1.zTree的方法"></a>1.zTree的方法</h4><p>树的构造，销毁，获取等方法</p><h4 id="2-setting-配置"><a href="#2-setting-配置" class="headerlink" title="2.setting 配置"></a>2.setting 配置</h4><p>用于ztree树的相关配置信息</p><h4 id="3-treeNode-节点数据的属性"><a href="#3-treeNode-节点数据的属性" class="headerlink" title="3.treeNode 节点数据的属性"></a>3.treeNode 节点数据的属性</h4><p>构成树的数据的信息和配置</p><h1 id="二-构造一个zTree树"><a href="#二-构造一个zTree树" class="headerlink" title="二.构造一个zTree树"></a>二.构造一个zTree树</h1><h2 id="1-zTree树的构造方法"><a href="#1-zTree树的构造方法" class="headerlink" title="1.zTree树的构造方法"></a>1.zTree树的构造方法</h2><p><img src="http://img.blog.csdn.net/20170923214617038?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>使用ZTreeAPI中的$.fn.zTree对象的init()方法<br>第一个参数是树对象的id，第二个参数是树对象的配置（参考API文档的setting配置），第三个参数是树对象的数据（参考API文档的treeNode节点数据属性），其是一个json格式的数据</p><h2 id="2-zTree树的节点数据格式"><a href="#2-zTree树的节点数据格式" class="headerlink" title="2.zTree树的节点数据格式"></a>2.zTree树的节点数据格式</h2><p>###1.标准json数据格式</p><p>setting配置采用默认配置，zNodes节点数据采用标准json数据格式，例如：</p><p>zNodes节点数据对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//每个json对象表示一个节点数据</span><br><span class="line">&#123;&quot;name&quot;:&quot;节点一&quot;,&quot;children&quot;:[</span><br><span class="line">&#123;&quot;name&quot;:&quot;节点一_1&quot;&#125;,</span><br><span class="line">&#123;&quot;name&quot;:&quot;节点一_2&quot;&#125;</span><br><span class="line">    ]&#125;,</span><br><span class="line">&#123;&quot;name&quot;:&quot;节点二&quot;&#125;,</span><br><span class="line">&#123;&quot;name&quot;:&quot;节点三&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>效果：</p><p><img src="http://img.blog.csdn.net/20170923220843003?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>总结：使用标准json数据格式构造zTree树时数据组织非常麻烦，zTree提供了更为简单的数据格式取代了标准json数据格式</p><p>###2.使用简单json数据构造zTree</p><p>步骤1.在setting中设置使用简单数据格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var setting = &#123;</span><br><span class="line">                data : &#123;</span><br><span class="line">                // 设置是否启用简单数据</span><br><span class="line">                    simpleData : &#123; </span><br><span class="line">                        enable : true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                callback : &#123;</span><br><span class="line">                    onClick : onClick</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>步骤二.zNodes节点数据对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;id&quot;:&quot;1&quot;,&quot;pId&quot;:&quot;2&quot;,&quot;name&quot;:&quot;节点一&quot;&#125;,</span><br><span class="line">&#123;&quot;id&quot;:&quot;2&quot;,&quot;pId&quot;:&quot;3&quot;,&quot;name&quot;:&quot;节点二&quot;&#125;,</span><br><span class="line">&#123;&quot;id&quot;:&quot;3&quot;,&quot;pId&quot;:&quot;0&quot;,&quot;name&quot;:&quot;节点三&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>效果：</p><p><img src="http://img.blog.csdn.net/20170923221333730?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>简单数据格式构建zNodes节点：每个节点数据都有一个独立的id，若A节点的pid和B节点的id对应，那么A节点就是B节点的子节点，若一个节点数据的pid没有和它相对应的id，那么这个节点数据就是根节点<br>总结：简单数据格式清晰易懂，适合节点数据较多较复杂的场景，实际应用中一般采用这种方式</p><h1 id="三-zTree插件实战"><a href="#三-zTree插件实战" class="headerlink" title="三.zTree插件实战"></a>三.zTree插件实战</h1><p><img src="http://img.blog.csdn.net/20170923210815605?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>目标：实现如上图所示的zTree树</p><h2 id="1-导入zTree的核心及支持类库"><a href="#1-导入zTree的核心及支持类库" class="headerlink" title="1.导入zTree的核心及支持类库"></a>1.导入zTree的核心及支持类库</h2><p>zTree插件的核心文件放路径根据实际情况修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 导入jquery核心类库 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;</span><br><span class="line">src=&quot;$&#123;pageContext.request.contextPath &#125;/js/jquery-1.8.3.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 导入ztree类库 --&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot;</span><br><span class="line">  href=&quot;$&#123;pageContext.request.contextPath &#125;/js/ztree/zTreeStyle.css&quot;</span><br><span class="line">  type=&quot;text/css&quot; /&gt;</span><br><span class="line">&lt;script</span><br><span class="line">src=&quot;$&#123;pageContext.request.contextPath &#125;/js/ztree/jquery.ztree.all-3.5.js&quot;</span><br><span class="line">type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script</span><br><span class="line">src=&quot;$&#123;pageContext.request.contextPath &#125;/js/easyui/locale/easyui-lang-zh_CN.js&quot;</span><br><span class="line">type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="2-在页面部分创建zTree对象"><a href="#2-在页面部分创建zTree对象" class="headerlink" title="2.在页面部分创建zTree对象"></a>2.在页面部分创建zTree对象</h2><p>页面代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div data-options=&quot;region:&apos;west&apos;,split:true,title:&apos;菜单导航&apos;&quot;</span><br><span class="line"> style=&quot;width:200px&quot;&gt;</span><br><span class="line">&lt;div class=&quot;easyui-accordion&quot; fit=&quot;true&quot; border=&quot;false&quot;&gt;</span><br><span class="line">&lt;div title=&quot;基本功能&quot; data-options=&quot;iconCls:&apos;icon-mini-add&apos;&quot; style=&quot;overflow:auto&quot;&gt;</span><br><span class="line">&lt;ul id=&quot;treeMenu&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div title=&quot;系统管理&quot; data-options=&quot;iconCls:&apos;icon-mini-add&apos;&quot; style=&quot;overflow:auto&quot;&gt;</span><br><span class="line">&lt;ul id=&quot;adminMenu&quot; class=&quot;ztree&quot;&gt;&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>accordion面板中定义两个选项，每个选项中定义一个ul行内标签，设置标签<strong>class属性为ztree类型</strong></p><p><img src="http://img.blog.csdn.net/20170923211638949?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="3-使用zTree提供的API为节点绑定事件，完成zTree树的加载"><a href="#3-使用zTree提供的API为节点绑定事件，完成zTree树的加载" class="headerlink" title="3.使用zTree提供的API为节点绑定事件，完成zTree树的加载"></a>3.使用zTree提供的API为节点绑定事件，完成zTree树的加载</h2><p>定义upload函数，在页面加载完毕后执行，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// 初始化ztree菜单</span><br><span class="line">        $(function() &#123;</span><br><span class="line">        //1.创建setting对象配置zTree树</span><br><span class="line">            var setting = &#123;</span><br><span class="line">                data : &#123;</span><br><span class="line">                // 采用简单数据格式</span><br><span class="line">                    simpleData : &#123; </span><br><span class="line">                        enable : true</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                callback : &#123;</span><br><span class="line">                    onClick : onClick</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            // 2.基本功能菜单加载</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">            //通过url路径下的静态资源（json格式的数据）构建zNodes节点数据</span><br><span class="line">                url : &apos;$&#123;pageContext.request.contextPath&#125;/json/menu.json&apos;,</span><br><span class="line">                type : &apos;POST&apos;,</span><br><span class="line">                dataType : &apos;text&apos;,</span><br><span class="line">                success : function(data) &#123;</span><br><span class="line">                //创建zNodes对象</span><br><span class="line">                    var zNodes = eval(&quot;(&quot; + data + &quot;)&quot;);</span><br><span class="line">                    //3.调用init()方法完成zTree树的加载</span><br><span class="line">                    $.fn.zTree.init($(&quot;#treeMenu&quot;), setting, zNodes);</span><br><span class="line">                &#125;,</span><br><span class="line">                error : function(msg) &#123;</span><br><span class="line">                    alert(&apos;菜单加载异常!&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            // 系统管理菜单加载</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                url : &apos;$&#123;pageContext.request.contextPath&#125;/json/admin.json&apos;,</span><br><span class="line">                type : &apos;POST&apos;,</span><br><span class="line">                dataType : &apos;text&apos;,</span><br><span class="line">                success : function(data) &#123;</span><br><span class="line">                    var zNodes = eval(&quot;(&quot; + data + &quot;)&quot;);</span><br><span class="line">                    $.fn.zTree.init($(&quot;#adminMenu&quot;), setting, zNodes);</span><br><span class="line">                &#125;,</span><br><span class="line">                error : function(msg) &#123;</span><br><span class="line">                    alert(&apos;菜单加载异常!&apos;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>项目中的menu.json文件中的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123; &quot;id&quot;:&quot;11&quot;, &quot;pId&quot;:&quot;0&quot;, &quot;name&quot;:&quot;基础数据&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;112&quot;, &quot;pId&quot;:&quot;11&quot;, &quot;name&quot;:&quot;取派员设置&quot;,  &quot;page&quot;:&quot;page_base_staff.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;113&quot;, &quot;pId&quot;:&quot;11&quot;, &quot;name&quot;:&quot;区域设置&quot;,&quot;page&quot;:&quot;page_base_region.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;114&quot;, &quot;pId&quot;:&quot;11&quot;, &quot;name&quot;:&quot;管理分区&quot;, &quot;page&quot;:&quot;page_base_subarea.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;115&quot;, &quot;pId&quot;:&quot;11&quot;, &quot;name&quot;:&quot;管理定区/调度排班&quot;,&quot;page&quot;:&quot;page_base_decidedzone.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;12&quot;, &quot;pId&quot;:&quot;0&quot;, &quot;name&quot;:&quot;受理&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;121&quot;, &quot;pId&quot;:&quot;12&quot;, &quot;name&quot;:&quot;业务受理&quot; ,&quot;page&quot;:&quot;page_qupai_noticebill_add.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;122&quot;, &quot;pId&quot;:&quot;12&quot;, &quot;name&quot;:&quot;工作单快速录入&quot; ,&quot;page&quot;:&quot;page_qupai_quickworkorder.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;124&quot;, &quot;pId&quot;:&quot;12&quot;, &quot;name&quot;:&quot;工作单导入&quot; ,&quot;page&quot;:&quot;page_qupai_workorderimport.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;13&quot;, &quot;pId&quot;:&quot;0&quot;, &quot;name&quot;:&quot;调度&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;131&quot;, &quot;pId&quot;:&quot;13&quot;, &quot;name&quot;:&quot;查台转单&quot;,&quot;page&quot;:&quot;&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;132&quot;, &quot;pId&quot;:&quot;13&quot;, &quot;name&quot;:&quot;人工调度&quot;,&quot;page&quot;:&quot;page_qupai_diaodu.action&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>项目中的admin.json文件中的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123; &quot;id&quot;:&quot;1001&quot;, &quot;pId&quot;:&quot;100&quot;, &quot;name&quot;:&quot;用户管理&quot;, &quot;page&quot;:&quot;page_admin_userlist.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;1002&quot;, &quot;pId&quot;:&quot;100&quot;, &quot;name&quot;:&quot;功能权限管理&quot;, &quot;page&quot;:&quot;page_admin_function.action&quot;&#125;,</span><br><span class="line">&#123; &quot;id&quot;:&quot;1003&quot;, &quot;pId&quot;:&quot;100&quot;, &quot;name&quot;:&quot;角色管理&quot;, &quot;page&quot;:&quot;page_admin_role.action&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在页面中使用zTree插件添加菜单栏功能&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JQuery" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JQuery/"/>
    
    
      <category term="ZTree" scheme="http://yoursite.com/tags/ZTree/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式--代理模式与JDK动态代理，cglib动态代理</title>
    <link href="http://yoursite.com/2018/03/28/Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B8%8EJDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%8Ccglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    <id>http://yoursite.com/2018/03/28/Java设计模式--代理模式与JDK动态代理，cglib动态代理/</id>
    <published>2018-03-28T02:32:17.000Z</published>
    <updated>2018-12-26T11:57:55.124Z</updated>
    
    <content type="html"><![CDATA[<p>代理模式在Java中的使用<br><a id="more"></a></p><h1 id="一-代理模式的概念"><a href="#一-代理模式的概念" class="headerlink" title="一.代理模式的概念"></a>一.代理模式的概念</h1><p>即Proxy Pattern，23种常用的面向对象软件的设计模式之一。</p><h3 id="代理模式的定义："><a href="#代理模式的定义：" class="headerlink" title="代理模式的定义："></a>代理模式的定义：</h3><p>为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，因此创建代理对象，代理对象在客户端和目标对象之间起到中介的作用。</p><h3 id="代理模式的组成部分："><a href="#代理模式的组成部分：" class="headerlink" title="代理模式的组成部分："></a>代理模式的组成部分：</h3><p>代理模式使用三个角色实现其目标功能，分别是：<br><strong>抽象角色</strong>（AbstractRole）：<br>通过接口或抽象类声明真实角色实现的业务方法。<br><strong>代理角色</strong>（ProxyRole）：<br>实现抽象角色，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。<br><strong>真实角色</strong>（RealRole）：<br>实现抽象角色，定义真实角色所要实现的业务逻辑，供代理角色调用。</p><h3 id="代理模式分类："><a href="#代理模式分类：" class="headerlink" title="代理模式分类："></a>代理模式分类：</h3><p>代理模式根据其实现方法的不同分为动态代理和静态代理，静态代理和动态代理的主要区别在于其生成代理类的方式，静态代理由程序员直接编写代理类，而动态代理的代理类是在程序执行过程中生成的</p><h1 id="二-静态代理"><a href="#二-静态代理" class="headerlink" title="二.静态代理"></a>二.静态代理</h1><p>静态代理根据代理类的生成方式分为聚合式静态代理和继承式静态代理<br>聚合式静态代理中代理类和目标类都实现了同一个接口，又称为代理类聚合了目标类，可实现灵活多变<br>继承式静态代理中代理类继承了目标类，减少了代码量（不必对不进行功能扩展的方法进行覆盖），但是不够灵活</p><h2 id="2-1-聚合式静态代理示例："><a href="#2-1-聚合式静态代理示例：" class="headerlink" title="2.1 聚合式静态代理示例："></a>2.1 聚合式静态代理示例：</h2><p>该程序由4部分组成：</p><p>接口：抽象角色（AbstractRole）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface IUserDao &#123;</span><br><span class="line">void save();</span><br><span class="line">void find();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目标类：即真实角色（RealRole）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class UserDao implements IUserDao&#123;</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">System.out.println(&quot;模拟： 保存用户！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void find() &#123;</span><br><span class="line">System.out.println(&quot;查询&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理类：代理角色（ProxyRole）<br>由程序员根据需要（扩展功能）编写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoProxy implements IUserDao&#123;</span><br><span class="line">//代理对象，需要维护一个目标对象</span><br><span class="line">private IUserDao target = new UserDao();</span><br><span class="line">//代理对象对目标对象进行功能扩展，使得代理对象能够完成目标对象不能完成的任务</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">System.out.println(&quot;代理操作： 开启事务...&quot;);</span><br><span class="line">target.save();</span><br><span class="line">System.out.println(&quot;代理操作：提交事务...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//不需要进行功能扩展的方法则直接调用目标对象中对应的该方法</span><br><span class="line">@Override</span><br><span class="line">public void find() &#123;</span><br><span class="line">target.find();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//创建代理对象</span><br><span class="line">IUserDao proxy = new UserDaoProxy();</span><br><span class="line">proxy.find(); </span><br><span class="line">proxy.save(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序执行结果：</p><p><img src="http://img.blog.csdn.net/20171130164423397?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>代理类UserDaoProxy扩展了目标类UserDao的功能，增强了save( )方法的功能，原本save( )方法只输出一句话，进行功能增强后多输出了两句话</p><h2 id="2-1-继承式静态代理示例："><a href="#2-1-继承式静态代理示例：" class="headerlink" title="2.1 继承式静态代理示例："></a>2.1 继承式静态代理示例：</h2><p>该程序由3部分组成：不需要接口即抽象角色（AbstractRole）</p><p>目标类：即真实角色（RealRole）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class UserDao &#123;</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">System.out.println(&quot;模拟： 保存用户！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void find() &#123;</span><br><span class="line">System.out.println(&quot;查询&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理类：代理角色（ProxyRole）<br>由程序员编写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class UserDaoProxy extends UserDao&#123;</span><br><span class="line">//代理对象对目标对象进行功能扩展</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">System.out.println(&quot;代理操作： 开启事务...&quot;);</span><br><span class="line">target.save();</span><br><span class="line">System.out.println(&quot;代理操作：提交事务...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//创建代理对象</span><br><span class="line">IUserDao proxy = new UserDaoProxy();</span><br><span class="line">proxy.find(); </span><br><span class="line">proxy.save(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继承式静态代理实现的功能和聚合式静态代理相同</p><h1 id="三-动态态代理"><a href="#三-动态态代理" class="headerlink" title="三.动态态代理"></a>三.动态态代理</h1><p>动态代理中的代理类是在程序执行过程中生成的，而不是由程序员直接编写的<br>动态代理根据代理类生成方法的不同分为JDK动态代理和cglib动态代理，和静态代理中聚合式与继承式的分类相同，JDK动态代理中代理类和目标类都实现了同一个接口，cglib动态代理中代理类则继承了目标类</p><h2 id="3-1-JDK动态代理"><a href="#3-1-JDK动态代理" class="headerlink" title="3.1 JDK动态代理"></a>3.1 JDK动态代理</h2><p>JDK动态代理主要使用了反射技术，同时还要用到JavaSE中的Proxy类和InvocationHandler接口</p><h3 id="3-1-1-动态代理涉及的类和接口"><a href="#3-1-1-动态代理涉及的类和接口" class="headerlink" title="3.1.1 动态代理涉及的类和接口"></a>3.1.1 动态代理涉及的类和接口</h3><h4 id="1）Proxy类"><a href="#1）Proxy类" class="headerlink" title="1）Proxy类"></a>1）Proxy类</h4><p><img src="http://img.blog.csdn.net/20171130154258784?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>Proxy类在reflect包下，与反射的关系紧密<br>Proxy类中的方法：</p><p><img src="http://img.blog.csdn.net/20171130154536123?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>其中第4个方法newProxyInstance( )最常用，用来创建代理类，其三个参数分别为（1）一个类加载器，（2）代理类和目标类共同实现的接口，（3）一个实现了InvocationHandler接口的对象</p><h4 id="2）InvocationHandler接口"><a href="#2）InvocationHandler接口" class="headerlink" title="2）InvocationHandler接口"></a>2）InvocationHandler接口</h4><p>InvocationHandler接口的主要用途就是作为Proxy类的newProxyInstance( )方法的参数，用来创建代理对象。其有4个实现类<br>InvocationHandler接口只有一个invoke( )方法</p><p><img src="http://img.blog.csdn.net/20171130155911173?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="3-1-2-动态代理示例："><a href="#3-1-2-动态代理示例：" class="headerlink" title="3.1.2 动态代理示例："></a>3.1.2 动态代理示例：</h3><p>下面展示一个静态代理程序，和静态代理一样，由4部分组成：</p><p>接口：抽象角色（AbstractRole）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//和静态代理一样，没有更改</span><br><span class="line">public interface IUserDao &#123;</span><br><span class="line">void save();</span><br><span class="line">void find();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目标类：即真实角色（RealRole）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//和静态代理一样，没有更改</span><br><span class="line">public class UserDao implements IUserDao&#123;</span><br><span class="line">@Override</span><br><span class="line">public void save() &#123;</span><br><span class="line">System.out.println(&quot;模拟： 保存用户！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@Override</span><br><span class="line">public void find() &#123;</span><br><span class="line">System.out.println(&quot;查询&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理类：代理角色（ProxyRole）<br>动态代理中，代理类是由程序生成的，这时不直接编写代理类，而是编写一个专门生成代理类的工厂类ProxyFactory，由ProxyFactory根据传入的参数生成代理类<br>ProxyFactory<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyFactory &#123;</span><br><span class="line">//构造方法，接收一个目标对象</span><br><span class="line">private Object target;</span><br><span class="line">public ProxyFactory(Object target) &#123;</span><br><span class="line">this.target = target;</span><br><span class="line">&#125;</span><br><span class="line">//代理对象的创建方法</span><br><span class="line">public Object getProxyInstance() &#123;</span><br><span class="line">//调用Proxy类的newProxyInstance()方法</span><br><span class="line">Object proxy = Proxy.newProxyInstance(</span><br><span class="line">//参数一：目标对象使用的类加载器</span><br><span class="line">target.getClass().getClassLoader(),  </span><br><span class="line">//参数二：目标对象实现的所有接口</span><br><span class="line">target.getClass().getInterfaces(),   </span><br><span class="line">//参数三：一个InvocationHandler对象的实现类，这里使用适配器模式创建</span><br><span class="line">//执行代理对象方法时才执行此方法，创建代理对象是不执行此方法</span><br><span class="line">new InvocationHandler() &#123;</span><br><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">//获取当前执行的方法的方法名</span><br><span class="line">String methodName = method.getName();</span><br><span class="line">//方法返回值</span><br><span class="line">Object result = null;</span><br><span class="line">//判断程序调用的代理类的方法</span><br><span class="line">if (&quot;find&quot;.equals(methodName)) &#123;</span><br><span class="line">//不需要进行功能扩展的方法，反射创建目标类的方法并调用</span><br><span class="line">result = method.invoke(target, args);</span><br><span class="line">&#125; </span><br><span class="line">//需要进行功能扩展的方法</span><br><span class="line">else &#123;</span><br><span class="line">//进行功能扩展</span><br><span class="line">System.out.println(&quot;开启事务...&quot;);</span><br><span class="line">//反射创建目标类的方法并调用</span><br><span class="line">result = method.invoke(target, args);</span><br><span class="line">System.out.println(&quot;提交事务...&quot;);</span><br><span class="line">&#125;</span><br><span class="line">//返回结果</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">return proxy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//创建目标对象</span><br><span class="line">IUserDao target = new UserDao();</span><br><span class="line">System.out.println(&quot;目标对象：&quot; + target.getClass());  // class cn.itcast.b_dynamic.UserDao</span><br><span class="line">//创建代理对象，使用代理工厂</span><br><span class="line">IUserDao proxy = (IUserDao) new ProxyFactory(target).getProxyInstance();</span><br><span class="line">System.out.println(&quot;代理对象： &quot; + proxy.getClass());  //  class $Proxy0</span><br><span class="line">//执行代理对象的方法</span><br><span class="line">proxy.find();</span><br><span class="line">proxy.save();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程序执行结果：</p><p><img src="http://img.blog.csdn.net/20171130164517938?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="3-2-cglib动态代理"><a href="#3-2-cglib动态代理" class="headerlink" title="3.2 cglib动态代理"></a>3.2 cglib动态代理</h2><p>JDK的动态代理有一个限制，就是使用动态代理的对象必须实现一个或多个接口。如果想代理没有实现接口的类，就需要使用cglib实现<br>cglib是一个强大的，高性能，高质量的code生成类库，它可以在运行期通过生成代理对象的方式扩展目标类的功能，它广泛的被许多AOP的框架使用，例如Spring AOP和dynaop，为他们提供方法的interception（拦截）<br>cglib包的底层是通过使用一个小而快的字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉</p><p>目标类：即真实角色（RealRole）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class UserDao &#123;</span><br><span class="line">public static void save() &#123;</span><br><span class="line">System.out.println(&quot;模拟： 保存用户！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">public void find() &#123;</span><br><span class="line">System.out.println(&quot;查询&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代理类：代理角色（ProxyRole）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class ProxyFactory implements MethodInterceptor&#123;</span><br><span class="line">//接收一个目标对象</span><br><span class="line">private Object target;</span><br><span class="line">public ProxyFactory(Object target) &#123;</span><br><span class="line">this.target = target;</span><br><span class="line">&#125;</span><br><span class="line">//返回代理对象——一个目标对象的子类对象</span><br><span class="line">public Object getProxyInstance() &#123;</span><br><span class="line">//字节码生成工具类</span><br><span class="line">Enhancer en = new Enhancer();</span><br><span class="line">//设置父类</span><br><span class="line">en.setSuperclass(target.getClass());</span><br><span class="line">//设置回调函数</span><br><span class="line">en.setCallback(this);</span><br><span class="line">//创建子类对象</span><br><span class="line">return en.create();</span><br><span class="line">&#125;</span><br><span class="line">// 事件处理器，执行目标方法时候执行</span><br><span class="line">@Override</span><br><span class="line">public Object intercept(Object obj, Method method, Object[] args,</span><br><span class="line">MethodProxy methodProxy) throws Throwable &#123;</span><br><span class="line">System.out.println(&quot;开启事务...&quot;);</span><br><span class="line">Object result = method.invoke(target, args);</span><br><span class="line">System.out.println(&quot;提交事务...&quot;);</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class App &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//创建目标对象</span><br><span class="line">UserDao target = new UserDao();</span><br><span class="line">System.out.println(&quot;目标对象：&quot; + target.getClass());</span><br><span class="line">//创建代理对象</span><br><span class="line">UserDao proxy = (UserDao) new ProxyFactory(target).getProxyInstance();</span><br><span class="line">System.out.println(&quot;代理对象： &quot; + proxy.getClass());</span><br><span class="line">//执行代理对象的方法</span><br><span class="line">proxy.find();</span><br><span class="line">proxy.save();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#总结：<br>经过静态代理和动态代理实现方法的分析，可以看出动态代理的优势：如果对多个目标类进行同样的功能扩展，使用静态代理需要为每个目标类创建一个代理对象，耦合性非常高，可复用性非常低，而使用动态代理，则只需要创建一个代理工厂，代理对象可以用代理工厂创建，这样扩展功能只需编写一遍就可以对所有目标类进行功能扩展</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;代理模式在Java中的使用&lt;br&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="JDK动态代理" scheme="http://yoursite.com/tags/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
      <category term="cglib动态代理" scheme="http://yoursite.com/tags/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Git安装配置与GitHub注册及简单使用</title>
    <link href="http://yoursite.com/2018/03/13/Git%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E4%B8%8EGitHub%E6%B3%A8%E5%86%8C%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/03/13/Git安装配置与GitHub注册及简单使用/</id>
    <published>2018-03-13T02:32:17.000Z</published>
    <updated>2018-12-26T11:57:25.389Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub入门级操作记录<br><a id="more"></a></p><h1 id="一-Git与GitHub"><a href="#一-Git与GitHub" class="headerlink" title="一.Git与GitHub"></a>一.Git与GitHub</h1><p>作为一个程序员，如果你不懂Git的使用，没有一个GitHub账号，你肯定会被别人嘲笑。GitHub是目前一个非常流行的代码托管平台，同时也是有大量程序员聚集的社区，很多著名的开源项目的代码都存放在这里。GitHub上的代码的管理需要通过本地的版本控制软件Git来操作，下文将详解如何从零开始使用Git及GitHub</p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git是一款免费、开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git是Linux之父Linus Torvalds为了帮助管理Linux内核开发而开发的，所以Git的控制台和Linux的控制台有很多相似之处，命令的风格也一样。<br>Git和SVN的功能类似，不过Git在渐渐的代替SVN称为最主流的版本控制工具</p><h2 id="GitHub简介"><a href="#GitHub简介" class="headerlink" title="GitHub简介"></a>GitHub简介</h2><p>GitHub是一个面向开源及私有软件项目的托管平台，目前已经拥有超过900万开发者用户。随着越来越多的应用程序转移到了云上，Github已经成为了管理软件开发以及发现已有代码的首选方法。</p><h1 id="二-配置使用Git和GitHub"><a href="#二-配置使用Git和GitHub" class="headerlink" title="二.配置使用Git和GitHub"></a>二.配置使用Git和GitHub</h1><h2 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1.安装Git"></a>1.安装Git</h2><p>Git安装程序可以从Git官网下载<a href="https://git-scm.com/downloads，如果官网下载速度太慢，也可从CSDN下载http://download.csdn.net/download/eagleuniversityeye/10142597" target="_blank" rel="noopener">https://git-scm.com/downloads，如果官网下载速度太慢，也可从CSDN下载http://download.csdn.net/download/eagleuniversityeye/10142597</a></p><p>Git官网：<br><img src="http://img.blog.csdn.net/20171203122501875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>安装程序：<br><img src="http://img.blog.csdn.net/20171203122540640?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>点击安装程序，全部使用默认设置，一路下一步即可，其中编辑器可以按自己喜好选择：</p><p><img src="http://img.blog.csdn.net/20171203123633898?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>安装完成后，打开Git程序，如果你选择的是Vim编辑器，则界面就是我这样的：</p><p><img src="http://img.blog.csdn.net/20171203124310930?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>输入“git”命令，若出现如下显示，则说明git安装成功，可以使用了</p><p><img src="http://img.blog.csdn.net/20171203124407719?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="2-注册GitHub账号并创建一个仓库"><a href="#2-注册GitHub账号并创建一个仓库" class="headerlink" title="2.注册GitHub账号并创建一个仓库"></a>2.注册GitHub账号并创建一个仓库</h2><p><a href="https://github.com/" target="_blank" rel="noopener">GitHub官网</a><br>注册完成后，打开GitHub首页，创建一个repository代码仓库，每一个代码仓库都是一个单独的项目，可以进行fork，star等操作。</p><p>如下图，点击new repository创建一个新仓库</p><p><img src="http://img.blog.csdn.net/20171203144349670?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>输入项目名，创建</p><p><img src="http://img.blog.csdn.net/20171203144650184?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>创建完成后页面跳转到下图所示</p><p><img src="http://img.blog.csdn.net/20171203144741970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>现在新创建的仓库还是空的，没有任何内容。红线圈起来的是该项目在远程服务器端的地址（HTTPS形式），等一下就向这个地址提交代码</p><h2 id="3-使用Git首次提交代码（使用HTTPS）"><a href="#3-使用Git首次提交代码（使用HTTPS）" class="headerlink" title="3.使用Git首次提交代码（使用HTTPS）"></a>3.使用Git首次提交代码（使用HTTPS）</h2><p>很多教程在这里会让人配置SSH key，但是在之后完全没用到SSH，其实对于刚开始使用GitHub的新手来说完全没有必要去配置SSH key，使用HTTPS就完全足够了。有关SSH是什么和SSH key配置的教程在我的另一篇文章中<a href="http://blog.csdn.net/eagleuniversityeye/article/details/78702189" target="_blank" rel="noopener">GitHub配置SSH key</a></p><p>1）在Git中配置全局用户名和邮箱，这个只用在第一次使用时配置一下，之后再使用就不必再配置了。</p><p><strong>git config –global user.name  “你的用户名”</strong><br><strong>git config –global user.email “你的邮箱”</strong></p><p><img src="http://img.blog.csdn.net/20171203151328232?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>2）在本地项目文件夹上点击右键，点击Git Bash Here，弹出Git的Vim编辑器 </p><p><img src="http://img.blog.csdn.net/20171203151920962?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>3）输入git命令，提交代码</p><p><strong>git init</strong></p><p><strong>git add 待上传文件夹名</strong><br>这个命令用来添加待上传文件，需要详细解释一下，它用来添加需要上传到GitHub远程服务器的文件，打开项目根目录，就是打开上图Annotation文件夹</p><p><img src="http://img.blog.csdn.net/20171203152537741?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>根目录下有以上几个文件夹，其中src文件夹，resources文件夹，web文件夹都有项目运行必须的文件，需要把它们全部添加到上传队列<br>即要运行3个git add 命令</p><p><strong>git add src</strong><br><strong>git add resources</strong><br><strong>git add web</strong></p><p>注：不同的项目需要上传的文件也不一样，根据情况选择</p><p>接着继续运行命令</p><p><strong>git commit -m “first commit”</strong><br><strong>git remote add origin 远程服务器中代码仓库地址（刚才圈红线的地址）</strong><br><strong>git push -u origin master</strong></p><p>接着输入用户名和密码完成提交</p><p>注：以上几个命令不需要记住，在GitHub的每个空代码仓库的页面都有：</p><p><img src="http://img.blog.csdn.net/20171203153228875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="4-使用IDEA连接GitHub，并管理代码"><a href="#4-使用IDEA连接GitHub，并管理代码" class="headerlink" title="4.使用IDEA连接GitHub，并管理代码"></a>4.使用IDEA连接GitHub，并管理代码</h2><p>每次提交代码都使用Vim编辑器非常不方便，可以在IDEA中进行设置，使用IDEA提交代码</p><h3 id="1）检查插件是否齐全"><a href="#1）检查插件是否齐全" class="headerlink" title="1）检查插件是否齐全"></a>1）检查插件是否齐全</h3><p>IDEA自带Git插件，我们需要下载GitHub的支持插件</p><p><img src="http://img.blog.csdn.net/20171203154118221?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="2）在IDEA中配置Git"><a href="#2）在IDEA中配置Git" class="headerlink" title="2）在IDEA中配置Git"></a>2）在IDEA中配置Git</h3><p>只用配置一下Git的开始程序即可，IDEA会自动检测其他内容</p><p><img src="http://img.blog.csdn.net/20171203154500158?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="3）在IDEA中配置GitHub用户名及密码"><a href="#3）在IDEA中配置GitHub用户名及密码" class="headerlink" title="3）在IDEA中配置GitHub用户名及密码"></a>3）在IDEA中配置GitHub用户名及密码</h3><p>如图进行配置，配置完成后可以点击Test查看是否配置成功</p><p><img src="http://img.blog.csdn.net/20171203154628137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="4）使用IDEA提交代码"><a href="#4）使用IDEA提交代码" class="headerlink" title="4）使用IDEA提交代码"></a>4）使用IDEA提交代码</h3><p>关于如何使用IDEA和GitHub进行协同操作，则是一个更难更复杂的问题，这里不再赘述</p><p><img src="http://img.blog.csdn.net/20171203154920877?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub入门级操作记录&lt;br&gt;
    
    </summary>
    
      <category term="Git/GitHub" scheme="http://yoursite.com/categories/Git-GitHub/"/>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>JQuery的一些简单使用</title>
    <link href="http://yoursite.com/2018/02/13/JQuery%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/02/13/JQuery的一些简单使用/</id>
    <published>2018-02-13T03:32:17.000Z</published>
    <updated>2018-12-26T11:58:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>使用JQuery实现一些小功能，包括表格隔行换色，选项框全选全不选<br><a id="more"></a></p><h2 id="一、使用JQ完成表格的隔行换色"><a href="#一、使用JQ完成表格的隔行换色" class="headerlink" title="一、使用JQ完成表格的隔行换色"></a>一、使用JQ完成表格的隔行换色</h2><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h3><p>在页面加载的时候让显示用户的表格进行隔行换色显示，效果如下：使用JQ实现</p><p><img src="http://img.blog.csdn.net/20180228234202881?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="2-技术分析"><a href="#2-技术分析" class="headerlink" title="2.技术分析"></a>2.技术分析</h3><p>需要使用jquery的选择器(基本选择器、基本过滤选择器)<br>还需要使用jquery的CSS的方法(css(name,value))<br>如果CSS样式已经由美工写好，此时可以使用jquery的CSS类操作</p><h3 id="3-步骤分析"><a href="#3-步骤分析" class="headerlink" title="3.步骤分析"></a>3.步骤分析</h3><p>第一步：引入jquery的类库<br>第二步：直接写页面加载函数<br>第三步：直接使用jquery的选择器(组合选择)拿到需要操作的元素(奇数行和偶数行)<br>第四步：分别使用CSS的方法(css(name,value))对奇数行和偶数行设置背景颜色。</p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/jquery-1.8.3.js&quot; &gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/style.css&quot;/&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(&quot;tbody tr:even&quot;).addClass(&quot;even&quot;);</span><br><span class="line">$(&quot;tbody tr:odd&quot;).addClass(&quot;odd&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="二、使用JQ完成全选和全不选"><a href="#二、使用JQ完成全选和全不选" class="headerlink" title="二、使用JQ完成全选和全不选"></a>二、使用JQ完成全选和全不选</h2><h3 id="1-需求分析-1"><a href="#1-需求分析-1" class="headerlink" title="1.需求分析"></a>1.需求分析</h3><p>在系统后台进行人员管理时，进行批量删除，使用jq完成全选和全不选</p><p><img src="http://img.blog.csdn.net/20180228234244984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="2-技术分析-1"><a href="#2-技术分析-1" class="headerlink" title="2.技术分析"></a>2.技术分析</h3><p>需要使用jquery的选择器(id选择器、类选择器)<br>需要使用jquery的属性操作方法 prop()</p><h3 id="3-步骤分析-1"><a href="#3-步骤分析-1" class="headerlink" title="3.步骤分析"></a>3.步骤分析</h3><p>第一步：引入jquery文件<br>第二步：书写页面加载函数<br>第三步：为上面的复选框绑定单击事件<br>第四步：将下面所有的复选框的选中状态设置成跟上面的一致！</p><h3 id="4-代码实现-1"><a href="#4-代码实现-1" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/jquery-1.8.3.js&quot; &gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">//找到下面所有的复选框并设置属性checked()</span><br><span class="line">/*if($(&quot;#select&quot;)[0].checked==true)&#123;</span><br><span class="line">$(&quot;.selectOne&quot;).attr(&quot;checked&quot;,true)</span><br><span class="line">&#125;*/</span><br><span class="line">$(&quot;#select&quot;).click(function()&#123;</span><br><span class="line">$(&quot;.selectOne&quot;).attr(&quot;checked&quot;,this.checked);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用JQuery实现一些小功能，包括表格隔行换色，选项框全选全不选&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JQuery" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JQuery/"/>
    
    
      <category term="JQuery" scheme="http://yoursite.com/tags/JQuery/"/>
    
      <category term="页面" scheme="http://yoursite.com/tags/%E9%A1%B5%E9%9D%A2/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
