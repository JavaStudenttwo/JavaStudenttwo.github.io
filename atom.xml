<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CycloneKid的个人博客</title>
  
  <subtitle>使用Hexo+GitHub搭建的个人博客 用于总结我平时学习的一些知识</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-13T11:41:59.596Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CycloneKid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JQuery的一些简单使用</title>
    <link href="http://yoursite.com/2018/04/13/JQuery%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2018/04/13/JQuery的一些简单使用/</id>
    <published>2018-04-13T03:32:17.000Z</published>
    <updated>2018-04-13T11:41:59.596Z</updated>
    
    <content type="html"><![CDATA[<p>使用JQuery实现一些小功能，包括表格隔行换色，选项框全选全不选<br><a id="more"></a></p><h2 id="一、使用JQ完成表格的隔行换色"><a href="#一、使用JQ完成表格的隔行换色" class="headerlink" title="一、使用JQ完成表格的隔行换色"></a>一、使用JQ完成表格的隔行换色</h2><h3 id="1-需求分析"><a href="#1-需求分析" class="headerlink" title="1.需求分析"></a>1.需求分析</h3><p>在页面加载的时候让显示用户的表格进行隔行换色显示，效果如下：使用JQ实现</p><p><img src="http://img.blog.csdn.net/20180228234202881?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="2-技术分析"><a href="#2-技术分析" class="headerlink" title="2.技术分析"></a>2.技术分析</h3><p>需要使用jquery的选择器(基本选择器、基本过滤选择器)<br>还需要使用jquery的CSS的方法(css(name,value))<br>如果CSS样式已经由美工写好，此时可以使用jquery的CSS类操作</p><h3 id="3-步骤分析"><a href="#3-步骤分析" class="headerlink" title="3.步骤分析"></a>3.步骤分析</h3><p>第一步：引入jquery的类库<br>第二步：直接写页面加载函数<br>第三步：直接使用jquery的选择器(组合选择)拿到需要操作的元素(奇数行和偶数行)<br>第四步：分别使用CSS的方法(css(name,value))对奇数行和偶数行设置背景颜色。</p><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/jquery-1.8.3.js&quot; &gt;&lt;/script&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/style.css&quot;/&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">$(&quot;tbody tr:even&quot;).addClass(&quot;even&quot;);</span><br><span class="line">$(&quot;tbody tr:odd&quot;).addClass(&quot;odd&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="二、使用JQ完成全选和全不选"><a href="#二、使用JQ完成全选和全不选" class="headerlink" title="二、使用JQ完成全选和全不选"></a>二、使用JQ完成全选和全不选</h2><h3 id="1-需求分析-1"><a href="#1-需求分析-1" class="headerlink" title="1.需求分析"></a>1.需求分析</h3><p>在系统后台进行人员管理时，进行批量删除，使用jq完成全选和全不选</p><p><img src="http://img.blog.csdn.net/20180228234244984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="2-技术分析-1"><a href="#2-技术分析-1" class="headerlink" title="2.技术分析"></a>2.技术分析</h3><p>需要使用jquery的选择器(id选择器、类选择器)<br>需要使用jquery的属性操作方法 prop()</p><h3 id="3-步骤分析-1"><a href="#3-步骤分析-1" class="headerlink" title="3.步骤分析"></a>3.步骤分析</h3><p>第一步：引入jquery文件<br>第二步：书写页面加载函数<br>第三步：为上面的复选框绑定单击事件<br>第四步：将下面所有的复选框的选中状态设置成跟上面的一致！</p><h3 id="4-代码实现-1"><a href="#4-代码实现-1" class="headerlink" title="4.代码实现"></a>4.代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/jquery-1.8.3.js&quot; &gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(function()&#123;</span><br><span class="line">//找到下面所有的复选框并设置属性checked()</span><br><span class="line">/*if($(&quot;#select&quot;)[0].checked==true)&#123;</span><br><span class="line">$(&quot;.selectOne&quot;).attr(&quot;checked&quot;,true)</span><br><span class="line">&#125;*/</span><br><span class="line">$(&quot;#select&quot;).click(function()&#123;</span><br><span class="line">$(&quot;.selectOne&quot;).attr(&quot;checked&quot;,this.checked);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用JQuery实现一些小功能，包括表格隔行换色，选项框全选全不选&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JQuery" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/JQuery/"/>
    
    
      <category term="JQuery" scheme="http://yoursite.com/tags/JQuery/"/>
    
      <category term="页面" scheme="http://yoursite.com/tags/%E9%A1%B5%E9%9D%A2/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Nginx入门</title>
    <link href="http://yoursite.com/2018/04/13/Nginx%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/04/13/Nginx入门/</id>
    <published>2018-04-13T02:32:17.000Z</published>
    <updated>2018-04-13T11:42:07.190Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx入门<br><a id="more"></a></p><h1 id="一-Nginx简介"><a href="#一-Nginx简介" class="headerlink" title="一.Nginx简介"></a>一.Nginx简介</h1><p>Nginx是一款高性能的http 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师Igor Sysoev所开发，官方测试nginx能够支支撑5万并发链接，并且cpu、内存等资源消耗却非常低，运行非常稳定</p><h3 id="Nginx的主要应用"><a href="#Nginx的主要应用" class="headerlink" title="Nginx的主要应用"></a>Nginx的主要应用</h3><p>1，Nginx可以用来做http服务器。Nginx可以独立提供http服务，可以做网页静态服务器<br>2，Nginx可以用来做虚拟主机，实现在一台服务器虚拟出多个网站，例如个人网站使用的虚拟主机<br>3，Nginx可以用来提供反向代理，负载均衡功能。当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用Nginx做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况</p><h1 id="二-Nginx实现反向代理"><a href="#二-Nginx实现反向代理" class="headerlink" title="二.Nginx实现反向代理"></a>二.Nginx实现反向代理</h1><h2 id="2-1-反向代理的含义"><a href="#2-1-反向代理的含义" class="headerlink" title="2.1 反向代理的含义"></a>2.1 反向代理的含义</h2><p>常见的服务器一般采用正向代理的方式，如下图所示：</p><p><img src="http://img.blog.csdn.net/20180131220039001?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>通常的代理服务器，只用于代理内部网络对Internet的连接请求，客户机必须指定代理服务器,并将本来要直接发送到Web服务器上的http请求发送到代理服务器中。由于外部网络上的主机并不会配置并使用这个代理服务器，普通代理服务器也被设计为在Internet上搜寻多个不确定的服务器,而不是针对Internet上多个客户机的请求访问某一个固定的服务器，因此普通的Web代理服务器不支持外部对内部网络的访问请求</p><p>当一个代理服务器能够代理外部网络上的主机（如Nginx），访问内部网络时，这种代理服务的方式称为反向代理服务。此时代理服务器对外就表现为一个Web服务器，外部网络就可以简单把它当作一个标准的Web服务器而不需要特定的配置。不同之处在于，这个服务器没有保存任何网页的真实数据，所有的静态网页或者CGI程序，都保存在内部的Web服务器上</p><p>反向代理的实现方式如下图所示：</p><p><img src="http://img.blog.csdn.net/20180131220122380?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="2-2-简单模拟一个反向代理的实现"><a href="#2-2-简单模拟一个反向代理的实现" class="headerlink" title="2.2 简单模拟一个反向代理的实现"></a>2.2 简单模拟一个反向代理的实现</h2><h3 id="反向代理模拟："><a href="#反向代理模拟：" class="headerlink" title="反向代理模拟："></a>反向代理模拟：</h3><p>两个域名指向同一台nginx服务器，用户访问不同的域名显示不同的网页内容。<br>两个域名是<a href="http://www.sian.com.cn和www.sohu.com" target="_blank" rel="noopener">www.sian.com.cn和www.sohu.com</a><br>nginx服务器使用虚拟机192.168.101.3 </p><p><img src="http://img.blog.csdn.net/20180131220813978?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h3 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h3><p>第一步：安装两个tomcat，分别运行在8080和8081端口。<br>第二步：启动两个tomcat。<br>第三步：反向代理服务器的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat1 &#123;</span><br><span class="line">server 192.168.25.148:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.sina.com.cn;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://tomcat1;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream tomcat2 &#123;</span><br><span class="line">server 192.168.25.148:8081;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.sohu.com;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://tomcat2;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>第四步：nginx重新加载配置文件<br>第五步：配置域名<br>在hosts文件中添加域名和ip的映射关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">192.168.25.148 www.sina.com.cn</span><br><span class="line">192.168.25.148 www.sohu.com</span><br></pre></td></tr></table></figure><h1 id="三-Nginx实现负载均衡"><a href="#三-Nginx实现负载均衡" class="headerlink" title="三.Nginx实现负载均衡"></a>三.Nginx实现负载均衡</h1><h2 id="3-1-Nginx实现负载均衡的基本原理"><a href="#3-1-Nginx实现负载均衡的基本原理" class="headerlink" title="3.1 Nginx实现负载均衡的基本原理"></a>3.1 Nginx实现负载均衡的基本原理</h2><p>如果一个服务由多条服务器提供，需要把负载分配到不同的服务器处理，需要负载均衡处理<br>Nginx配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat2 &#123;</span><br><span class="line">server 192.168.25.148:8081;</span><br><span class="line">server 192.168.25.148:8082;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>可以根据服务器的实际情况调整服务器权重。权重越高分配的请求越多，权重越低，请求越少。默认是都是1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream tomcat2 &#123;</span><br><span class="line">server 192.168.25.148:8081;</span><br><span class="line">server 192.168.25.148:8082 weight=2;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Nginx实现负载均衡的具体方法"><a href="#3-2-Nginx实现负载均衡的具体方法" class="headerlink" title="3.2 Nginx实现负载均衡的具体方法"></a>3.2 Nginx实现负载均衡的具体方法</h2><h3 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h3><p>Nginx作为负载均衡器，所有请求都到了Nginx，可见Nginx处于非常重点的位置，如果Nginx服务器宕机后端web服务将无法提供服务，影响严重。<br>为了屏蔽负载均衡服务器的宕机，需要建立一个备份机。主服务器和备份机上都运行高可用（High Availability）监控程序，通过传送诸如“I am alive”这样的信息来监控对方的运行状况。当备份机不能在一定的时间内收到这样的信息时，它就接管主服务器的服务IP并继续提供负载均衡服务；当备份管理器又从主管理器收到“I am alive”这样的信息时，它就释放服务IP地址，这样的主服务器就开始再次提供负载均衡服务。</p><h3 id="keepalived"><a href="#keepalived" class="headerlink" title="keepalived"></a>keepalived</h3><h4 id="keepalived简介"><a href="#keepalived简介" class="headerlink" title="keepalived简介"></a>keepalived简介</h4><p>keepalived是集群管理中保证集群高可用的一个服务软件，用来防止单点故障。<br>     Keepalived的作用是检测web服务器的状态，如果有一台web服务器死机，或工作出现故障，Keepalived将检测到，并将有故障的web服务器从系统中剔除，当web服务器工作正常后Keepalived自动将web服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的web服务器。</p><h4 id="keepalived工作原理"><a href="#keepalived工作原理" class="headerlink" title="keepalived工作原理"></a>keepalived工作原理</h4><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。<br>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（VIP = Virtual IP Address，虚拟IP地址，该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到VRRP包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。<br>keepalived主要有三个模块，分别是core、check和VRRP。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。VRRP模块是来实现VRRP协议的。 </p><h3 id="负载均衡示意图"><a href="#负载均衡示意图" class="headerlink" title="负载均衡示意图"></a>负载均衡示意图</h3><p>正常工作时：</p><p><img src="http://img.blog.csdn.net/20180131221648074?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>发生主机宕机等意外情况时：</p><p><img src="http://img.blog.csdn.net/20180131221658479?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>主机故障排除后：</p><p><img src="http://img.blog.csdn.net/20180131221705364?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx入门&lt;br&gt;
    
    </summary>
    
      <category term="Nginx服务器" scheme="http://yoursite.com/categories/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统Tomcat无法正常启动</title>
    <link href="http://yoursite.com/2018/04/13/CentOS7.3%E7%B3%BB%E7%BB%9FTomcat%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3%EF%BC%888005%E7%AB%AF%E5%8F%A3%E4%B8%8D%E8%83%BD%E5%90%AF%E5%8A%A8%EF%BC%89/"/>
    <id>http://yoursite.com/2018/04/13/CentOS7.3系统Tomcat无法正常启动解决（8005端口不能启动）/</id>
    <published>2018-04-13T01:32:17.000Z</published>
    <updated>2018-04-13T11:40:58.988Z</updated>
    
    <content type="html"><![CDATA[<p>我今天在阿里云买了一个服务器，使用CentOS7系统，在安装Tomcat是遇到错误排查了很长时间，在这里将错误总结记叙一下<br><a id="more"></a><br>Linux系统CentOS7.3版中启动Tomcat7，确定JDK正常运行且配置正确的情况下，启动Tomcat始终无法正常访问</p><h1 id="排错过程："><a href="#排错过程：" class="headerlink" title="排错过程："></a>排错过程：</h1><h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><p>关闭Tomcat，使用端口查看命令netstat -tunlp查看</p><p><img src="http://img.blog.csdn.net/20180411154909916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>发现8080端口，8009端口，8005端口均为被占用</p><h3 id="第二步："><a href="#第二步：" class="headerlink" title="第二步："></a>第二步：</h3><p>启动Tomcat，使用端口查看命令netstat -tunlp查看，发现8080端口，8009端口正常启动，没有发现8005端口，使用netstat -tunlp|grep 8005命令查看，确定8005端口没有被占用，所以一定是8005端口是没有正常启动</p><p><img src="http://img.blog.csdn.net/20180411154144291?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h1 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h1><p>需要修改文件：$JAVA_HOME/jre/lib/security/java.security中的配置<br>使用vi编辑器打开文件</p><p><img src="http://img.blog.csdn.net/20180411155300271?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>将：securerandom.source=file:/dev/random<br>改为： securerandom.source=file:/dev/urandom</p><p>注：可以使用/securerandom.source查找，n表示下一目标位置</p><p>重启Tomcat，发现3个端口均正常启动</p><p><img src="http://img.blog.csdn.net/20180411154206094?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWFnbGV1bml2ZXJzaXR5ZXll/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我今天在阿里云买了一个服务器，使用CentOS7系统，在安装Tomcat是遇到错误排查了很长时间，在这里将错误总结记叙一下&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="CentOS7" scheme="http://yoursite.com/tags/CentOS7/"/>
    
  </entry>
  
</feed>
